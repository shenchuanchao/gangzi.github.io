<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>码农观测站</title>
  
  <subtitle>欢迎进入码农观测站，分享编程学习的乐趣</subtitle>
  <link href="https://www.codeobservatory.cn/atom.xml" rel="self"/>
  
  <link href="https://www.codeobservatory.cn/"/>
  <updated>2025-06-13T02:35:52.762Z</updated>
  <id>https://www.codeobservatory.cn/</id>
  
  <author>
    <name>码农刚子</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C#英文字母大小写转换方法</title>
    <link href="https://www.codeobservatory.cn/archives/bd7cb84f.html"/>
    <id>https://www.codeobservatory.cn/archives/bd7cb84f.html</id>
    <published>2025-06-13T02:33:07.000Z</published>
    <updated>2025-06-13T02:35:52.762Z</updated>
    
    <content type="html"><![CDATA[<p>在C#的编程开发过程中，有时候判断字符串是否相等时，并不关注字母的大小写，此时在C#中可以使用ToUpper方法将字符串中所有的字母转换为大写，使用ToLower方法可以将字符串中所有字母转换为小写。</p><p>例如有个字符串<code>string   testStr=“AbcDefg”</code>;</p><ol><li>转换为大写：<code>string UpTestStr=testStr.ToUpper();</code></li></ol><p>转换后UpTestStr结果为:<code>ABCDEFG</code></p><ol start="2"><li>转换为小写：<code>string LowTestStr=testStr.ToLower();</code></li></ol><p>转换后LowTestStr结果为：<code>abcdefg</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在C#的编程开发过程中，有时候判断字符串是否相等时，并不关注字母的大小写，此时在C#中可以使用ToUpper方法将字符串中所有的字母转换为大写，使用ToLower方法可以将字符串中所有字母转换为小写。&lt;/p&gt;
&lt;p&gt;例如有个字符串&lt;code&gt;string   testStr</summary>
      
    
    
    
    <category term="后端开发" scheme="https://www.codeobservatory.cn/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="C#" scheme="https://www.codeobservatory.cn/tags/C/"/>
    
    <category term="大小写转换" scheme="https://www.codeobservatory.cn/tags/%E5%A4%A7%E5%B0%8F%E5%86%99%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>熬夜爆肝整理万字C#基础入门大总结【建议收藏】</title>
    <link href="https://www.codeobservatory.cn/archives/f71906c0.html"/>
    <id>https://www.codeobservatory.cn/archives/f71906c0.html</id>
    <published>2025-06-13T01:53:59.000Z</published>
    <updated>2025-06-13T02:20:58.349Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、C-介绍"><a href="#一、C-介绍" class="headerlink" title="一、C#介绍"></a>一、C#介绍</h2><p>源于c语言，简单易学，入门超快，减少了烦人的指针，有统一的操作符&#x2F;修饰符&#x2F;运算符，使用起来简洁称心。不仅如此：</p><ol><li>它是结构化语言，能产生高效率的程序</li><li>面向组件，开发快速</li><li>在多种计算机平台上编译，良好兼容性</li><li>优秀的版本管理控制，安装卸载和其他程序不影响</li><li>.Net框架一部分</li></ol><p>都是她被广泛应用的原因。</p><p>它不仅是按照面向对象设计的语言，而且还类型安全，还有更多让人舒心的功能：</p><ol><li>自动垃圾回收</li><li>属性、事件、委托等</li><li>标准库</li><li>简单多线程</li><li>Lambad表达式</li></ol><h2 id="二、-NET简介"><a href="#二、-NET简介" class="headerlink" title="二、.NET简介"></a>二、.NET简介</h2><p>.NET框架是一个集成、一个环境、一个非常强大的平台，是微软推出的核心技术。开发式的体系结构，覆盖的内容非常广：</p><p><img src="https://images.codeobservatory.cn/hexo/202506/13/f6f80e2f8650f8e2.png" alt="熬夜爆肝整理万字C#基础入门大总结【建议收藏】"></p><p>由上图看出.NET Framework是.NET最重要的核心技术。Framework提供了多语言开发，而C#是其中核心语言。</p><p><img src="https://images.codeobservatory.cn/hexo/202506/13/89893b5c0744d40.png" alt="熬夜爆肝整理万字C#基础入门大总结【建议收藏】"></p><h2 id="三、VS快捷键"><a href="#三、VS快捷键" class="headerlink" title="三、VS快捷键"></a>三、VS快捷键</h2><p>先来普及回顾下VS中的常用快捷键</p><p><code>Ctrl+K+D</code>:快速对齐代码</p><p><code>Ctrl+Z</code>:撤销</p><p><code>Ctrl+S</code>:保存(一定要经常保存！)</p><p><code>Ctrl+J</code>:快速弹出智能提示</p><p><code>Shift+End</code> 、<code>Shift+Home</code></p><p><code>Ctrl+K+C</code>:注释所选代码</p><p><code>Ctrl+K+U</code>:取消对所选代码的注释</p><p><code>F1</code>：转到帮助文档</p><p>折叠冗余代码：#Region 和#EndRegion（Android Studio也可以自定义折叠代码 &#x2F;&#x2F;region &#x2F;&#x2F;endregion 快捷键 Ctrl+Alt+T）</p><p>单行注释：&#x2F;&#x2F;</p><p>多行注释：&#x2F;要注释的内容&#x2F;</p><p>文档注释：&#x2F;&#x2F;&#x2F; 多用来解释类或者方法</p><p>四、数据类型</p><p>编程基础就不强调了，主要看看拼写和其他语言有什么不同就行了</p><p><img src="https://images.codeobservatory.cn/hexo/202506/13/24441e1ba047989c.png" alt="熬夜爆肝整理万字C#基础入门大总结【建议收藏】"></p><p>除了这些值类型还有引用类型，包含对象类型，动态类型，字符串类型</p><p>字符串类型：string或者String，注意s大小写，平时都能用，但也有小区别。</p><p>字符串有个@符号可以将转移字符当成普通字符，且@符会保留字符串里面的换行符空格符等</p><p>例：string str&#x3D;”D:\alibaba”; 等价于string str&#x3D;@”D:\alibaba”;</p><p>动态类型：dynami，他会根据内容自动存储对应类型</p><p>例：dynamic str&#x3D;”这是字符”; dynamic number&#x3D;10; 就像前端的var类型</p><p>对象类型：ogject，所有类型的最低基类，能分配任何类型的值，麻烦就是用的时候可能经常得进行类型转换。</p><p>五、转义字符</p><p><img src="https://images.codeobservatory.cn/hexo/202506/13/30e7809e9d4f3aee.png" alt="熬夜爆肝整理万字C#基础入门大总结【建议收藏】"></p><h2 id="六、运算符"><a href="#六、运算符" class="headerlink" title="六、运算符"></a>六、运算符</h2><p>仍然是直接上表格图，编程基础。</p><p><img src="https://images.codeobservatory.cn/hexo/202506/13/13150c9da862dd13.png" alt="熬夜爆肝整理万字C#基础入门大总结【建议收藏】"><br><img src="https://images.codeobservatory.cn/hexo/202506/13/bab1bb498a3574f1.png" alt="熬夜爆肝整理万字C#基础入门大总结【建议收藏】"><br><img src="https://images.codeobservatory.cn/hexo/202506/13/e66f7ceff8b79d5b.png" alt="熬夜爆肝整理万字C#基础入门大总结【建议收藏】"><br><img src="https://images.codeobservatory.cn/hexo/202506/13/8fcd6bdd282b13b0.png" alt="熬夜爆肝整理万字C#基础入门大总结【建议收藏】"></p><h2 id="七、判断-循环"><a href="#七、判断-循环" class="headerlink" title="七、判断&#x2F;循环"></a>七、判断&#x2F;循环</h2><p>逻辑判断仍然是编程老鸟的基基础，只是简单概括一下</p><ul><li>判断语句：<code>if else switch</code></li><li>循环语句：<code>while for foreach do…while break continue</code></li></ul><h2 id="八、访问修饰符"><a href="#八、访问修饰符" class="headerlink" title="八、访问修饰符"></a>八、访问修饰符</h2><p>C#可以设置使用者的访问权限，这样开发者可以指定该模块或逻辑是公开，封闭，还是指定访问者。不知道其他语言什么样，跟Java是一样样的。</p><ol><li>public：所有对象都可以访问；</li><li>private：对象本身在对象内部可以访问；</li><li>protected：只有该类对象及其子类对象可以访问</li><li>internal：同一个程序集的对象可以访问；</li><li>protected internal：访问限于当前程序集或派生自包含类的类型。</li></ol><h2 id="九、可变类型-合并运算符"><a href="#九、可变类型-合并运算符" class="headerlink" title="九、可变类型&#x2F;合并运算符"></a>九、可变类型&#x2F;合并运算符</h2><ul><li>可空类型（Nullable）：表示其基础类型除了默认的值外，再添加一个null值。例如：<code>int? num = 1; double? num= new double?();</code></li><li>Null合并运算符（？？）：如果第一个操作数为null，则返回第二个操作数，否则返回第一个，就像Java的？：运算。</li></ul><p>例如 A&#x3D;B??C 如果B为空则将C赋值给A，如果B 不为空则将B赋值给A。</p><h2 id="十、数组"><a href="#十、数组" class="headerlink" title="十、数组"></a>十、数组</h2><p>数组类型是若干个数据类型相同的数据元素组成的数据结构。C#也是分为一维数组和多维数组，多维数组又包括矩形数组和交错数据。<br>还有一个参数数组，可以传递未知数量参数给函数。这个就像Java中的(int… num)。</p><p>例:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ParamArray app = <span class="keyword">new</span> ParamArray();</span><br><span class="line"><span class="built_in">int</span> sum = app.AddElements(<span class="number">512</span>, <span class="number">720</span>, <span class="number">250</span>, <span class="number">567</span>, <span class="number">889</span>);</span><br></pre></td></tr></table></figure><p>数组类型基本是System.Array类的派生类，快捷键Ctrl+左键进入源码，快速学习都有什么功能实现。</p><h2 id="十一、结构体"><a href="#十一、结构体" class="headerlink" title="十一、结构体"></a>十一、结构体</h2><p>它能用单一变量存储多个数据类型，举例：一个书变量，可以存作者，标题，出版社，价钱等基础变量。超好理解，和Java的实体一样，就是需要<code>struct</code>关键字来修饰创建结构体。特点：</p><ol><li>结构可带有方法、字段、索引、属性、运算符方法和事件。</li><li>结构可定义构造函数，但不能定义析构函数。但是，您不能为结构定义无参构造函数。无参构造函数 (默认)是自动定义的，且不能被改变。</li><li>与类不同，结构不能继承其他的结构或类。</li><li>结构不能作为其他结构或类的基础结构。</li><li>结构可实现一个或多个接口。</li><li>结构成员不能指定为 abstract、virtual 或 protected。</li><li>当您使用 New 操作符创建一个结构对象时，会调用适当的构造函数来创建结构。与类不同，结构可以不使用 New 操作符即可被实例化。</li><li>如果不使用 New 操作符，只有在所有的字段都被初始化之后，字段才被赋值，对象才被使用。</li><li>结构体的字段可以加前缀”_”来和变量区分</li><li>结构体快捷键：首选选中你要自动完成的变量，先按ctrl+R,再按ctrl+E这两个组合键，可以自动生成属性中的get和set方法</li></ol><h2 id="十二、枚举"><a href="#十二、枚举" class="headerlink" title="十二、枚举"></a>十二、枚举</h2><p>就是命名一组整型常量，不能继承或传递继承，只能当常量使用。举例：<code>enum Number&#123;one,two,three&#125;</code>; 则Number.one等于0 Number.two等于1，以此类推枚举可以和结构体结合：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Person&#123;        </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> _name;<span class="comment">//字段        </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> _age;        </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Gender _gender;    </span><br><span class="line"></span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> Gender   &#123;         男,        女&#125;</span><br><span class="line"></span><br><span class="line">Person zsPerson;</span><br><span class="line"></span><br><span class="line">zsPerson._name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"></span><br><span class="line">zsPerson._age = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line">zsPerson._gender = Gender.男;</span><br></pre></td></tr></table></figure><h2 id="十三、类-函数"><a href="#十三、类-函数" class="headerlink" title="十三、类&#x2F;函数"></a>十三、类&#x2F;函数</h2><p>类仍然是<code>class</code>修饰，在class前面可以指定对类及成员的访问规则，若没写则类默认是<code>internal</code>，成员访问是<code>private</code>。</p><p>例：<code>public class ClassName &#123; &#125;</code></p><p>函数和Java同样含有构造函数和带参函数，在这多了一个析构函数，是一个特殊的成员函数。是一个新知识需要记一下。</p><p>析构函数以~作为前缀，不需要任何修饰符，不返回值，也不带参数，不能继承或重载。官方文档大致意思就是用来释放资源的，只不过并非是在不使用的时候立即释放，它是懒惰的，垃圾回收机制会在适当的时候回收，比如内存紧张，关闭程序等时候。这和Android里面的onDestory有异曲同工之妙，同样的，也有GC方法来强制回收。</p><h2 id="十四、继承-多重继承"><a href="#十四、继承-多重继承" class="headerlink" title="十四、继承&#x2F;多重继承"></a>十四、继承&#x2F;多重继承</h2><p>继承是面向对象设计的最重要概念之一，一个类继承自另一个类，举例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">A</span>&#123; &#125; </span><br><span class="line"><span class="keyword">class</span> <span class="title">B</span>:<span class="title">A</span>&#123; &#125; </span><br></pre></td></tr></table></figure><p>B继承自A，B可以称为派生类也可以称为子类，A可以称为基类也可以称为父类。（派生类和基类，子类和父类） 。B拥有访问A的能力，形象点说就是子类可以拿到父类的财产，父类拿不到子类的财产。</p><p>C#不支持多重继承，我咨询过C++同事，C++支持多重继承。</p><h2 id="十五、多态"><a href="#十五、多态" class="headerlink" title="十五、多态"></a>十五、多态</h2><p>面向对象程序的核心功能之一，是同一个行为具有多个不同表现的能力。C#和Java都是面向对象的，它们的多态思想基本是一致的。优点多多：</p><ol><li>消除类型间耦合关系</li><li>具有可扩充性，增强灵活性</li><li>接口性，实现简单</li></ol><p>C#包含静态多态和动态多态，静态多态又包含：函数重载和运算符重载。</p><p>函数重载：就是相同的函数名有多个定义。函数的参数类型或个数不同来实现。例如：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">test</span>(<span class="params"><span class="built_in">int</span> num1</span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">test</span>(<span class="params"><span class="built_in">int</span> num1,<span class="built_in">int</span> num2</span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">test</span>(<span class="params"><span class="built_in">int</span> num1,<span class="built_in">string</span> str1</span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>运算符重载看示例更形象，但是示例代码多，就不在这记了，感兴趣的可以自己去搜索学习</p><p>动态重载使用的是用<code>abstract</code>创建的抽象类，另一个是借助关键字<code>virtual</code>修饰的虚方法类似实现。示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Shape</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="built_in">int</span> <span class="title">area</span>()</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Rectangle</span>:  <span class="title">Shape</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="built_in">int</span> length;</span><br><span class="line">      <span class="keyword">private</span> <span class="built_in">int</span> width;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span>(<span class="params"> <span class="built_in">int</span> a=<span class="number">0</span>, <span class="built_in">int</span> b=<span class="number">0</span></span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         length = a;</span><br><span class="line">         width = b;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">//注意着的override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> <span class="title">area</span> ()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Rectangle 类的面积：&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> (width * length);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">class</span> <span class="title">RectangleTester</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Rectangle r = <span class="keyword">new</span> Rectangle(<span class="number">10</span>, <span class="number">7</span>);</span><br><span class="line">         <span class="built_in">double</span> a = r.area();</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;面积：&#123;0&#125;&quot;</span>,a);</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//虚方法示例</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Shape</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">protected</span> <span class="built_in">int</span> width, height;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Shape</span>(<span class="params"> <span class="built_in">int</span> a=<span class="number">0</span>, <span class="built_in">int</span> b=<span class="number">0</span></span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         width = a;</span><br><span class="line">         height = b;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 关键字virtual</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">int</span> <span class="title">area</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;父类的面积：&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Rectangle</span>: <span class="title">Shape</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span>(<span class="params"> <span class="built_in">int</span> a=<span class="number">0</span>, <span class="built_in">int</span> b=<span class="number">0</span></span>): <span class="title">base</span>(<span class="params">a, b</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> <span class="title">area</span> ()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Rectangle 类的面积：&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> (width * height);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Triangle</span>: <span class="title">Shape</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Triangle</span>(<span class="params"><span class="built_in">int</span> a = <span class="number">0</span>, <span class="built_in">int</span> b = <span class="number">0</span></span>): <span class="title">base</span>(<span class="params">a, b</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> <span class="title">area</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Triangle 类的面积：&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> (width * height / <span class="number">2</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="keyword">class</span> <span class="title">Tester</span></span><br><span class="line">   &#123;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Rectangle r = <span class="keyword">new</span> Rectangle(<span class="number">10</span>, <span class="number">7</span>);</span><br><span class="line">         Triangle t = <span class="keyword">new</span> Triangle(<span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line">         c. area ();</span><br><span class="line">         c. area ();</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十六、接口"><a href="#十六、接口" class="headerlink" title="十六、接口"></a>十六、接口</h2><p>接口使用<code>interface</code>关键字声明，和类class的声明差不多，默认是public类型的。但是当有多个类，多个类有多个相同的方法，使用接口来实现方便管理，且不会丢失。和Java使用基本是一致的。示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">ITestInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">TestInterfaceMethod</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> : <span class="title">ITestInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestInterfaceMethod</span>()</span>    </span><br><span class="line">    &#123;  </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十七、命名空间"><a href="#十七、命名空间" class="headerlink" title="十七、命名空间"></a>十七、命名空间</h2><p><code>Namespace</code>这玩意就是用来方便管理的，而且在计算机中相同的设计思想到处可见，比如同一个文件夹下不能有同名的文件，你放在不同文件夹下可以有同名文件。<br>其他编程语言比如Java有包路径，不同路径名字可以有同名的类。这种思想方便管理文件&#x2F;代码。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">first_space</span>&#123;  </span><br><span class="line"></span><br><span class="line"> <span class="keyword">class</span> <span class="title">namespace_cl</span>   &#123;   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//比如这样，程序是会报错的  </span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">class</span> <span class="title">namespace_cl</span>   &#123;   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//但是你是下面的状态就不会报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">first_space</span>&#123;  </span><br><span class="line"></span><br><span class="line"> <span class="keyword">class</span> <span class="title">namespace_cl</span>   &#123;   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">second_space</span>&#123; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title">namespace_cl</span>   &#123; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这有的人就开始有疑问了：如果是不同的文件或者想访问其他的空间怎么办呢？</p><p>细心的已经发现了，就和Java的导包一样，C#使用using导入空间，在每个编程文件的最上面几行都是这样的引入，想要哪些空间的功能导入哪个。</p><p>这时候又有人有疑问了，能不能修仙小说那样天外有天，天上还有天。能不能命名空间套命名空间，套套套，此处禁止套娃。</p><p>答案是可以的，引入的时候：<code>using namespaceone.namespacetwo</code> 用英文符号<code>.</code>即可，跟Java包路径同理。</p><h2 id="十八、预处理器"><a href="#十八、预处理器" class="headerlink" title="十八、预处理器"></a>十八、预处理器</h2><p>从字面理解就是提前对信息进行处理。她确实也是这样的，她会根据你指定的条件，只编译满足条件的代码，不满足条件的代码不编译。既区分了软件版本，代码还在一块，管理方便。预处理指令是#开始的，且只能作为开头，一般指令单独占一行。都有哪些指令在这就不单独写了。在Unity中指令挺有用的，因为PC是键盘，Android事件是手势，用预处理提前写好不同端的不同实现代码（当然它们功能可能是一致的），打包发布的时候利人利己。</p><h2 id="十九、异常"><a href="#十九、异常" class="headerlink" title="十九、异常"></a>十九、异常</h2><ul><li><code>try</code>：一个 try 块标识了一个将被激活的特定的异常的代码块。后跟一个或多个 catch 块。</li><li><code>catch</code>：程序通过异常处理程序捕获异常。catch 关键字表示异常的捕获。</li><li><code>finally</code>：finally 块用于执行给定的语句，不管异常是否被抛出都会执行。例如，如果您打开一个文件，不管是否出现异常文件都要被关闭。</li><li><code>throw</code>：当问题出现时，程序抛出一个异常。使用 throw 关键字来完成。</li></ul><h2 id="二十、反射"><a href="#二十、反射" class="headerlink" title="二十、反射"></a>二十、反射</h2><p>通俗的讲就是可以访问一个类的所有属性和方法，且能够调用。有人提问了：随便写的public类不都是能任意访问调用的吗，这有什么区别？</p><p>区别在于一个是正常写代码，你知道代码逻辑和内容，且都在你的掌控之内，当然能访问；而反射不同它能够访问你不清楚的类，比如三方框架你遇到这个框架里某个类某个方法没有对外开放，而你又需要使用，就可以用反射把它抛出来。</p><p><strong>优点</strong>：</p><ol><li>反射提高了程序的灵活性和扩展性。</li><li>降低耦合性，提高自适应能力。</li><li>它允许程序创建和控制任何类的对象，无需提前编码目标类。</li></ol><p><strong>缺点</strong>：</p><ol><li>性能问题：使用反射基本上是一种解释操作，用于字段和方法接入时要远慢于直接代码。因此反射机制主要应用在对灵活性和拓展性要求很高的系统框架上，普通程序不建议使用。</li><li>使用反射会模糊程序内部逻辑；程序员希望在源代码中看到程序的逻辑，反射却绕过了源代码的技术，因而会带来维护的问题，反射代码比相应的直接代码更复杂。</li></ol><h2 id="二十一、属性"><a href="#二十一、属性" class="headerlink" title="二十一、属性"></a>二十一、属性</h2><p>get&#x2F;set方法,没什么可讲的。</p><h2 id="二十二、委托"><a href="#二十二、委托" class="headerlink" title="二十二、委托"></a>二十二、委托</h2><p>使用关键字<code>delegate</code>来修饰，必须用new关键字来创建，且与某个特定方法关联。</p><p>比较官方的说法：表示对具有特定参数列表和返回类型的方法的引用。通过委托，可以将方法视为可分配给变量并可作为参数传递的实体。委托还类似于其他一些语言中存在的“函数指针”概念。与函数指针不同，委托是面向对象且类型安全的。</p><p>按照自己的理解：委托就是包一个外壳，操作外壳就是调用壳内的内容。就好像老板让你板砖，你委托给另一个人让她板砖。这就是委托。</p><p>委托中还能通过加减号来实现多个，称之为多播。只有相同类型的委托可以合并。</p><p>使用场景：因刚需C#没什么实际经验，大家知道有什么好的实际应用环境吗?</p><p>委托示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个是声明个委托</span></span><br><span class="line">    <span class="function"><span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">NumberChanger</span>(<span class="params"><span class="built_in">int</span> n</span>)</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">AddNum</span>(<span class="params"><span class="built_in">int</span> p</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        num += p;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">MultNum</span>(<span class="params"><span class="built_in">int</span> q</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        num *= q;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 创建委托实例</span></span><br><span class="line">        NumberChanger nc;</span><br><span class="line">        NumberChanger nc1 = <span class="keyword">new</span> NumberChanger(AddNum);</span><br><span class="line">        NumberChanger nc2 = <span class="keyword">new</span> NumberChanger(MultNum);</span><br><span class="line">        <span class="comment">// 使用委托对象调用方法</span></span><br><span class="line">        nc1(<span class="number">25</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Value of Num: &#123;0&#125;&quot;</span>, num);</span><br><span class="line">        nc2(<span class="number">5</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Value of Num: &#123;0&#125;&quot;</span>, num);</span><br><span class="line">        <span class="comment">//下面是组播 使用  +或- 符号操作</span></span><br><span class="line">        nc = nc1;</span><br><span class="line">        nc += nc2;</span><br><span class="line">        <span class="comment">// 调用多播</span></span><br><span class="line">        nc(<span class="number">5</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Value of Num: &#123;0&#125;&quot;</span>, num);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">       <span class="comment">//输出结果为：</span></span><br><span class="line">            <span class="comment">//Value of Num: 35</span></span><br><span class="line">            <span class="comment">//Value of Num: 175</span></span><br><span class="line">            <span class="comment">//Value of Num: 75</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">这篇文章详细介绍了C#基础入门知识 ，涵盖了C#语言的特点、.NET框架简介、Visual Studio快捷键、数据类型、转义字符、运算符、判断与循环语句、访问修饰符、可空类型与合并运算符、数组、结构体、枚举、类与函数、继承与多重继承、多态性以及接口等内容，文章不仅讲解了C#语言的基础语法和特性，还通过实例展示了如何在实际编程中应用这些 知识，帮助读者快速掌握C#编程的核心要点，适合初学者和希望巩固基础的开发者阅读。</summary>
    
    
    
    <category term="后端开发" scheme="https://www.codeobservatory.cn/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="C#" scheme="https://www.codeobservatory.cn/tags/C/"/>
    
    <category term="入门" scheme="https://www.codeobservatory.cn/tags/%E5%85%A5%E9%97%A8/"/>
    
    <category term="总结" scheme="https://www.codeobservatory.cn/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C#读取Excel文件的几种方法【总结整理】</title>
    <link href="https://www.codeobservatory.cn/archives/6673646b.html"/>
    <id>https://www.codeobservatory.cn/archives/6673646b.html</id>
    <published>2025-06-13T01:46:16.000Z</published>
    <updated>2025-06-13T01:52:10.447Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法一：采用OleDB读取EXCEL文件"><a href="#方法一：采用OleDB读取EXCEL文件" class="headerlink" title="方法一：采用OleDB读取EXCEL文件"></a>方法一：采用OleDB读取EXCEL文件</h2><p>把EXCEL文件当做一个数据源来进行数据的读取操作，实例如下：    </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> DataSet <span class="title">ExcelToDS</span>(<span class="params"><span class="built_in">string</span> Path</span>)</span> &#123; </span><br><span class="line">    <span class="built_in">string</span> strConn = <span class="string">&quot;Provider=Microsoft.Jet.OLEDB.4.0;&quot;</span> +<span class="string">&quot;Data Source=&quot;</span>+ Path +<span class="string">&quot;;&quot;</span>+<span class="string">&quot;Extended Properties=Excel 8.0;&quot;</span>; </span><br><span class="line">    OleDbConnection conn = <span class="keyword">new</span> OleDbConnection(strConn); </span><br><span class="line">    conn.Open();   </span><br><span class="line">    <span class="built_in">string</span> strExcel = <span class="string">&quot;&quot;</span>;    </span><br><span class="line">    OleDbDataAdapter myCommand = <span class="literal">null</span>; </span><br><span class="line">    DataSet ds = <span class="literal">null</span>; </span><br><span class="line">    strExcel=<span class="string">&quot;select * from [sheet1$]&quot;</span>; </span><br><span class="line">    myCommand = <span class="keyword">new</span> OleDbDataAdapter(strExcel, strConn); </span><br><span class="line">    ds = <span class="keyword">new</span> DataSet(); </span><br><span class="line">    myCommand.Fill(ds,<span class="string">&quot;table1&quot;</span>);    </span><br><span class="line">    <span class="keyword">return</span> ds; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于EXCEL中的表即sheet([sheet1$])如果不是固定的可以使用下面的方法得到    </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> strConn = <span class="string">&quot;Provider=Microsoft.Jet.OLEDB.4.0;&quot;</span> +<span class="string">&quot;Data Source=&quot;</span>+ Path +<span class="string">&quot;;&quot;</span>+<span class="string">&quot;Extended Properties=Excel 8.0;&quot;</span>; </span><br><span class="line">OleDbConnection conn = <span class="keyword">new</span> OleDbConnection(strConn); </span><br><span class="line">DataTable schemaTable = objConn.GetOleDbSchemaTable(System.Data.OleDb.OleDbSchemaGuid.Tables,<span class="literal">null</span>); </span><br><span class="line"><span class="built_in">string</span> tableName=schemaTable.Rows[<span class="number">0</span>][<span class="number">2</span>].ToString().Trim();</span><br></pre></td></tr></table></figure><p>另外：也可进行写入EXCEL文件，实例如下：  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DSToExcel</span>(<span class="params"><span class="built_in">string</span> Path,DataSet oldds</span>)</span> &#123; </span><br><span class="line">    <span class="comment">//先得到汇总EXCEL的DataSet 主要目的是获得EXCEL在DataSet中的结构     string strCon = &quot; Provider = Microsoft.Jet.OLEDB.4.0 ;</span></span><br><span class="line">    Data Source =<span class="string">&quot;+path1+&quot;</span>;Extended Properties=Excel <span class="number">8.0</span><span class="string">&quot;; </span></span><br><span class="line"><span class="string">    OleDbConnection myConn = new OleDbConnection(strCon);</span></span><br><span class="line"><span class="string">    string strCom=&quot;</span><span class="keyword">select</span> * <span class="keyword">from</span> [Sheet1$]<span class="string">&quot;; </span></span><br><span class="line"><span class="string">    myConn.Open();</span></span><br><span class="line"><span class="string">    OleDbDataAdapter myCommand = new OleDbDataAdapter ( strCom, myConn ); </span></span><br><span class="line"><span class="string">    ystem.Data.OleDb.OleDbCommandBuilder builder=new OleDbCommandBuilder(myCommand); </span></span><br><span class="line"><span class="string">    //QuotePrefix和QuoteSuffix主要是对builder生成InsertComment命令时使用。     builder.QuotePrefix=&quot;</span>[<span class="string">&quot;;     //获取insert语句中保留字符（起始位置）     builder.QuoteSuffix=&quot;</span>]<span class="string">&quot;; //获取insert语句中保留字符（结束位置）     DataSet newds=new DataSet(); </span></span><br><span class="line"><span class="string">    myCommand.Fill(newds ,&quot;</span>Table1<span class="string">&quot;) ; </span></span><br><span class="line"><span class="string">    for(int i=0;i&lt;oldds.Tables[0].Rows.Count;i++) &#123; </span></span><br><span class="line"><span class="string">        //在这里不能使用ImportRow方法将一行导入到news中，因为ImportRow将保留原来DataRow的所有设置(DataRowState状态不变)。</span></span><br><span class="line"><span class="string">        // 在使用ImportRow后newds内有值，但不能更新到Excel中因为所有导入行的DataRowState!=Added         DataRow nrow=aDataSet.Tables[&quot;</span>Table1<span class="string">&quot;].NewRow(); </span></span><br><span class="line"><span class="string">        for(int j=0;j&lt;newds.Tables[0].Columns.Count;j++)&#123; </span></span><br><span class="line"><span class="string">            nrow[j]=oldds.Tables[0].Rows[i][j];</span></span><br><span class="line"><span class="string">        &#125; </span></span><br><span class="line"><span class="string">        newds.Tables[&quot;</span>Table1<span class="string">&quot;].Rows.Add(nrow); </span></span><br><span class="line"><span class="string">    &#125; </span></span><br><span class="line"><span class="string">    myCommand.Update(newds,&quot;</span>Table1<span class="string">&quot;); </span></span><br><span class="line"><span class="string">    myConn.Close(); </span></span><br><span class="line"><span class="string">&#125; </span></span><br></pre></td></tr></table></figure><h2 id="方法二：引用的com组件：Microsoft-Office-Interop-Excel-dll读取EXCEL文件"><a href="#方法二：引用的com组件：Microsoft-Office-Interop-Excel-dll读取EXCEL文件" class="headerlink" title="方法二：引用的com组件：Microsoft.Office.Interop.Excel.dll读取EXCEL文件"></a>方法二：引用的com组件：Microsoft.Office.Interop.Excel.dll读取EXCEL文件</h2><p>首先是Excel.dll的获取,将Office安装目录下的Excel.exe文件Copy到DotNet的bin目录下,cmd到该目录下,运行 TlbImp EXCEL.EXE Excel.dll 得到Dll文件。 再在项目中添加引用该dll文件.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取EXCEL的方法   (用范围区域读取数据)private void OpenExcel(string strFileName)&#123;    object missing = System.Reflection.Missing.Value;</span></span><br><span class="line">    Application excel = <span class="keyword">new</span> Application();<span class="comment">//lauch excel application</span></span><br><span class="line">    <span class="keyword">if</span> (excel == <span class="literal">null</span>)&#123;</span><br><span class="line">        Response.Write(<span class="string">&quot;&lt;script&gt;alert(&#x27;Can&#x27;t access excel&#x27;)&lt;/script&gt;&quot;</span>);</span><br><span class="line">    &#125;    <span class="keyword">else</span>&#123;</span><br><span class="line">        excel.Visible = <span class="literal">false</span>; excel.UserControl = <span class="literal">true</span>;        <span class="comment">// 以只读的形式打开EXCEL文件</span></span><br><span class="line">        Workbook wb = excel.Application.Workbooks.Open(strFileName, missing, <span class="literal">true</span>, missing, missing, missing,</span><br><span class="line">         missing, missing, missing, <span class="literal">true</span>, missing, missing, missing, missing, missing);        <span class="comment">//取得第一个工作薄</span></span><br><span class="line">        Worksheet ws = (Worksheet)wb.Worksheets.get_Item(<span class="number">1</span>); </span><br><span class="line">        <span class="comment">//取得总记录行数   (包括标题列)</span></span><br><span class="line">        <span class="built_in">int</span> rowsint = ws.UsedRange.Cells.Rows.Count; <span class="comment">//得到行数</span></span><br><span class="line">        <span class="comment">//int columnsint = mySheet.UsedRange.Cells.Columns.Count;//得到列数</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="comment">//取得数据范围区域 (不包括标题列) </span></span><br><span class="line">        Range rng1 = ws.Cells.get_Range(<span class="string">&quot;B2&quot;</span>, <span class="string">&quot;B&quot;</span> + rowsint);   <span class="comment">//item</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        Range rng2 = ws.Cells.get_Range(<span class="string">&quot;K2&quot;</span>, <span class="string">&quot;K&quot;</span> + rowsint); <span class="comment">//Customer</span></span><br><span class="line">        <span class="built_in">object</span>[,] arryItem= (<span class="built_in">object</span>[,])rng1.Value2;   <span class="comment">//get range&#x27;s value</span></span><br><span class="line">        <span class="built_in">object</span>[,] arryCus = (<span class="built_in">object</span>[,])rng2.Value2;   </span><br><span class="line">        <span class="comment">//将新值赋给一个数组</span></span><br><span class="line">        <span class="built_in">string</span>[,] arry = <span class="keyword">new</span> <span class="built_in">string</span>[rowsint<span class="number">-1</span>, <span class="number">2</span>];        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= rowsint<span class="number">-1</span>; i++)&#123;            <span class="comment">//Item_Code列</span></span><br><span class="line">            arry[i - <span class="number">1</span>, <span class="number">0</span>] =arryItem[i, <span class="number">1</span>].ToString();            <span class="comment">//Customer_Name列</span></span><br><span class="line">            arry[i - <span class="number">1</span>, <span class="number">1</span>] = arryCus[i, <span class="number">1</span>].ToString();</span><br><span class="line">        &#125;</span><br><span class="line">        Response.Write(arry[<span class="number">0</span>, <span class="number">0</span>] + <span class="string">&quot; / &quot;</span> + arry[<span class="number">0</span>, <span class="number">1</span>] + <span class="string">&quot;#&quot;</span> + arry[rowsint - <span class="number">2</span>, <span class="number">0</span>] + <span class="string">&quot; / &quot;</span> + arry[rowsint - <span class="number">2</span>, <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">     excel.Quit(); excel = <span class="literal">null</span>;</span><br><span class="line">    Process[] procs = Process.GetProcessesByName(<span class="string">&quot;excel&quot;</span>); </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">foreach</span> (Process pro <span class="keyword">in</span> procs)&#123;</span><br><span class="line">        pro.Kill();<span class="comment">//没有更好的方法,只有杀掉进程</span></span><br><span class="line">    &#125;</span><br><span class="line">    GC.Collect();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法三：将EXCEL文件转化成CSV（逗号分隔）的文件，用文件流读取-等价就是读取一个txt文本文件-。"><a href="#方法三：将EXCEL文件转化成CSV（逗号分隔）的文件，用文件流读取-等价就是读取一个txt文本文件-。" class="headerlink" title="方法三：将EXCEL文件转化成CSV（逗号分隔）的文件，用文件流读取(等价就是读取一个txt文本文件)。"></a>方法三：将EXCEL文件转化成CSV（逗号分隔）的文件，用文件流读取(等价就是读取一个txt文本文件)。</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">先引用命名空间:<span class="keyword">using</span> System.Text;和<span class="keyword">using</span> System.IO;</span><br><span class="line">FileStream fs = <span class="keyword">new</span> FileStream(<span class="string">&quot;d:\\Customer.csv&quot;</span>, FileMode.Open, FileAccess.Read, FileShare.None);</span><br><span class="line">StreamReader sr = <span class="keyword">new</span> StreamReader(fs, System.Text.Encoding.GetEncoding(<span class="number">936</span>)); </span><br><span class="line"><span class="built_in">string</span> str = <span class="string">&quot;&quot;</span>;<span class="built_in">string</span> s = Console.ReadLine();<span class="keyword">while</span> (str != <span class="literal">null</span>)&#123;</span><br><span class="line">    str = sr.ReadLine();    <span class="built_in">string</span>[] xu = <span class="keyword">new</span> String[<span class="number">2</span>];</span><br><span class="line">    xu = str.Split(<span class="string">&#x27;,&#x27;</span>);    <span class="built_in">string</span> ser = xu[<span class="number">0</span>]; </span><br><span class="line">    <span class="built_in">string</span> dse = xu[<span class="number">1</span>];    <span class="keyword">if</span> (ser == s)&#123;</span><br><span class="line">        Console.WriteLine(dse);<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">sr.Close();</span><br></pre></td></tr></table></figure><p>另外也可以将数据库数据导入到一个txt文件，实例如下：  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//txt文件名string fn = DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;) + &quot;-&quot; + &quot;PO014&quot; + &quot;.txt&quot;;</span></span><br><span class="line"> </span><br><span class="line">OleDbConnection con = <span class="keyword">new</span> OleDbConnection(conStr); </span><br><span class="line">con.Open();<span class="built_in">string</span> sql = <span class="string">&quot;select ITEM,REQD_DATE,QTY,PUR_FLG,PO_NUM from TSD_PO014&quot;</span>;        <span class="comment">//OleDbCommand mycom = new OleDbCommand(&quot;select * from TSD_PO014&quot;, mycon);//OleDbDataReader myreader = mycom.ExecuteReader(); //也可以用Reader读取数据DataSet ds = new DataSet();</span></span><br><span class="line">OleDbDataAdapter oda = <span class="keyword">new</span> OleDbDataAdapter(sql, con);</span><br><span class="line">oda.Fill(ds, <span class="string">&quot;PO014&quot;</span>);</span><br><span class="line">DataTable dt = ds.Tables[<span class="number">0</span>];</span><br><span class="line"> </span><br><span class="line">FileStream fs = <span class="keyword">new</span> FileStream(Server.MapPath(<span class="string">&quot;download/&quot;</span> + fn), FileMode.Create, FileAccess.ReadWrite);</span><br><span class="line">StreamWriter strmWriter = <span class="keyword">new</span> StreamWriter(fs);    <span class="comment">//存入到文本文件中 </span></span><br><span class="line"> <span class="comment">//把标题写入.txt文件中 //for (int i = 0; i &lt;dt.Columns.Count;i++)//&#123;//    strmWriter.Write(dt.Columns[i].ColumnName + &quot; &quot;);//&#125;</span></span><br><span class="line"> <span class="keyword">foreach</span> (DataRow dr <span class="keyword">in</span> dt.Rows)&#123;    <span class="built_in">string</span> str0, str1, str2, str3;    <span class="built_in">string</span> str = <span class="string">&quot;|&quot;</span>; <span class="comment">//数据用&quot;|&quot;分隔开</span></span><br><span class="line">    str0 = dr[<span class="number">0</span>].ToString();</span><br><span class="line">    str1 = dr[<span class="number">1</span>].ToString();</span><br><span class="line">    str2 = dr[<span class="number">2</span>].ToString();</span><br><span class="line">    str3 = dr[<span class="number">3</span>].ToString();</span><br><span class="line">    str4 = dr[<span class="number">4</span>].ToString().Trim();</span><br><span class="line">    strmWriter.Write(str0);</span><br><span class="line">    strmWriter.Write(str);</span><br><span class="line">    strmWriter.Write(str1);</span><br><span class="line">    strmWriter.Write(str);</span><br><span class="line">    strmWriter.Write(str2);</span><br><span class="line">    strmWriter.Write(str);</span><br><span class="line">    strmWriter.Write(str3);</span><br><span class="line">    strmWriter.WriteLine(); <span class="comment">//换行&#125;</span></span><br><span class="line">strmWriter.Flush(); </span><br><span class="line">strmWriter.Close();<span class="keyword">if</span> (con.State == ConnectionState.Open)&#123;</span><br><span class="line">    con.Close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是C#读取Excel文件的三种方法，希望对大家有所帮助。</p>]]></content>
    
    
    <summary type="html">这篇文章总结了C#读取Excel文件的几种方法 ，包括使用OleDB将Excel文件作为数据源进行读取和写入操作，通过连接字符串和OleDbDataAdapter实现数据交互，还可以动态获取Excel中的表名，同时提供了写入Excel文件的实例代码；第二种方法是引用Microsoft.Office.Interop.Excel.dll组件，通过Excel应用程序接口以只读方式打开Excel文件，获取工作簿和工作表，读取指定区域的数据并存储到数组中，最后释放资源并关闭Excel进程；第三种方法是将Excel文件转换为CSV格式，使用文件流和流读取器逐行读取数据，通过分割符解析内容，同时也提到将数据库数据导出为txt文件的方法。</summary>
    
    
    
    <category term="后端开发" scheme="https://www.codeobservatory.cn/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="C#" scheme="https://www.codeobservatory.cn/tags/C/"/>
    
    <category term="Excel读取" scheme="https://www.codeobservatory.cn/tags/Excel%E8%AF%BB%E5%8F%96/"/>
    
    <category term="OleDB" scheme="https://www.codeobservatory.cn/tags/OleDB/"/>
    
  </entry>
  
  <entry>
    <title>C#正则表达式大全</title>
    <link href="https://www.codeobservatory.cn/archives/7eb79003.html"/>
    <id>https://www.codeobservatory.cn/archives/7eb79003.html</id>
    <published>2025-06-13T01:05:34.000Z</published>
    <updated>2025-06-13T01:49:38.424Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式是一种匹配输入文本的模式，可以用于解析和验证给定文本以及模式之间是否匹配，模式可以包含运算符、字符字面值或结构。</p><h2 id="正则表达式的组成"><a href="#正则表达式的组成" class="headerlink" title="正则表达式的组成"></a>正则表达式的组成</h2><p>我们可以使用正则表达式检查给定字符串是否与指定模式相匹配。正则表达式的匹配模式由一系列字符组成，其中可以包括数子、文字、运算符、字符等等。我们可以使用这些模式来搜索字符串或文件，并查看是否找到了匹配的项。</p><p>开发中我们一般使用正则表达式来验证用户输入的信息是否正确，比如邮箱地址、手机号码等等。下面列举了用于定义正则表达式的各种类别的字符、运算符和结构：</p><ul><li>转义字符；</li><li>字符类；</li><li>定位符；</li><li>分组构造；</li><li>限定符；</li><li>反向引用构造；</li><li>备用构造；</li><li>替换；</li><li>杂项构造。</li></ul><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>正则表达式中的反斜杠\用来表示它后面跟随的字符是特殊字符，具有特殊的含义。下表列举了一些常用的转义字符：</p><table><thead><tr><th>转义字符</th><th>描述</th><th>正则表达式</th><th>示例</th></tr></thead><tbody><tr><td>\a</td><td>与报警 (bell) 符 \u0007 匹配</td><td>\a</td><td>匹配 “Warning!” + ‘\u0007’ 中的 “\u0007”</td></tr><tr><td>\b</td><td>在字符类中，与退格键 \u0008 匹配</td><td>[\b]{3,}</td><td>匹配 “\b\b\b\b” 中的 “\b\b\b\b”</td></tr><tr><td>\t</td><td>与制表符 \u0009 匹配</td><td>(\w+)\t</td><td>匹配 “Name\tAddr\t” 中的 “Name\t” 和 “Addr\t”</td></tr><tr><td>\r</td><td>与回车符 \u000D 匹配,（\r 与换行符 \n 不是等效的）</td><td>\r\n(\w+)</td><td>匹配 “\r\nHello\nWorld.” 中的 “\r\nHello”</td></tr><tr><td>\v</td><td>与垂直制表符 \u000B 匹配</td><td>[\v]{2,}</td><td>匹配 “\v\v\v” 中的 “\v\v\v”</td></tr><tr><td>\f</td><td>与换页符 \u000C 匹配</td><td>[\f]{2,}</td><td>匹配 “\f\f\f” 中的 “\f\f\f”</td></tr><tr><td>\n</td><td>与换行符 \u000A 匹配</td><td>\r\n(\w+)</td><td>匹配 “\r\nHello\nWorld.” 中的 “\r\nHello”</td></tr><tr><td>\e</td><td>与转义符 \u001B 匹配</td><td>\e</td><td>匹配 “\x001B” 中的 “\x001B”</td></tr><tr><td>\nnn</td><td>使用八进制形式指定一个字符（nnn 由二到三位数字组成）</td><td>\w\040\w</td><td>匹配 “a bc d” 中的 “a b” 和 “c d”</td></tr><tr><td>\xnn</td><td>使用十六进制形式指定字符（nn 由两位数字组成）</td><td>\w\x20\w</td><td>匹配 “a bc d” 中的 “a b” 和 “c d”</td></tr><tr><td>\cX\cx</td><td>匹配 X 或 x 指定的 ASCII 字符，其中 X 或 x 是控件字符的字母</td><td>\cC</td><td>匹配 “Ctrl” 中的 “C”</td></tr><tr><td>\unnnn</td><td>使用十六进制形式匹配一个 Unicode 字符（nnnn 表示一个四位数）</td><td>\w\u0020\w</td><td>匹配 “a bc d” 中的 “a b” 和 “c d”</td></tr><tr><td>\</td><td>在后面带有不识别的转义字符时，与该字符匹配</td><td>\d+[+-x*]\d+\d+[+-x*\d+</td><td>匹配 “(2+2) * 3<em>9” 中的 “2+2” 和 “3</em>9”</td></tr></tbody></table><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><p>字符类可以与一个字符串中的任何一个字符相匹配，下表中列举了一些常用的字符类：</p><table><thead><tr><th>字符类</th><th>描述</th><th>正则表达式</th><th>示例</th></tr></thead><tbody><tr><td>[character_group]</td><td>匹配 character_group 中的任何一个字符，默认情况下 character_group 中的字符区分大小写</td><td>[mn]</td><td>匹配 “mat” 中的 “m”，”moon” 中的 “m” 和 “n”</td></tr><tr><td>[^character_group]</td><td>匹配不在 character_group 中的任何单个字符，默认情况下 character_group 中的字符区分大小写</td><td>[^aei]</td><td>匹配 “avail” 中的 “v” 和 “l”</td></tr><tr><td>[first-last]</td><td>字符范围，匹配与从 first 到 last 范围内的任何单个字符</td><td>[b-d]</td><td>[b-d]irds 可以匹配 Birds、 Cirds、 Dirds</td></tr><tr><td>.</td><td>通配符：匹配任何字符，若要匹配句号（. 或 \u002E），则必须在该字符前面加上转义符 (.)</td><td>a.e</td><td>匹配 “have” 中的 “ave”， “mate” 中的 “ate”</td></tr><tr><td>\p{name}</td><td>匹配 name 中指定的 Unicode 字符</td><td>\p{Lu}</td><td>匹配 “City Lights” 中的 “C” 和 “L”</td></tr><tr><td>\P{name}</td><td>匹配不在 name 中指定的 Unicode 字符</td><td>\P{Lu}</td><td>匹配 “City” 中的 “i”、 “t” 和 “y”</td></tr><tr><td>\w</td><td>匹配字母、数字、下划线</td><td>\w</td><td>匹配 “Room#1” 中的 “R”、 “o”、 “m” 和 “1”</td></tr><tr><td>\W</td><td>匹配字母、数字或下划线以外的字符</td><td>\W</td><td>匹配 “Room#1” 中的 “#”</td></tr><tr><td>\s</td><td>匹配任何空白字符（包括换行符）</td><td>\w\s</td><td>匹配 “ID A1.3” 中的 “D “</td></tr><tr><td>\S</td><td>匹配任何非空白字符（包括换行符）</td><td>\s\S</td><td>匹配 “int __ctr” 中的 “ _”</td></tr><tr><td>\d</td><td>匹配任何十进制数字</td><td>\d</td><td>匹配 “4 &#x3D; IV” 中的 “4”</td></tr><tr><td>\D</td><td>匹配不是十进制数的任意字符</td><td>\D</td><td>匹配 “4 &#x3D; IV” 中的 “ “、 “&#x3D;”、 “ “、 “I” 和 “V”</td></tr></tbody></table><h3 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h3><p>定位符可以根据字符串出现的具体位置来判断匹配是成功还是失败，下表中列举了常用的定位符：</p><table><thead><tr><th>断言</th><th>描述</th><th>正则表达式</th><th>示例</th></tr></thead><tbody><tr><td>^</td><td>从字符串的开始位置进行匹配</td><td>^\d{3}</td><td>匹配 “567-777-“ 中的 “567”</td></tr><tr><td>$</td><td>从字符串的结尾位置进行匹配</td><td>-\d{4}$</td><td>匹配 “8-12-2012” 中的 “-2012”</td></tr><tr><td>\A</td><td>匹配字符串的开始位置</td><td>\A\w{4}</td><td>匹配 “Code-007-“ 中的 “Code”</td></tr><tr><td>\Z</td><td>匹配字符串的结尾位置或字符串结尾换行之前的位置</td><td>-\d{3}\Z</td><td>匹配 “Bond-901-007” 中的 “-007”</td></tr><tr><td>\z</td><td>匹配字符串的结尾位置</td><td>-\d{3}\z</td><td>匹配 “-901-333” 中的 “-333”</td></tr><tr><td>\G</td><td>匹配上一个匹配结束的位置</td><td>\G(\d)</td><td>匹配 “(1)(3)(5)<a href="9">7</a>“ 中的 “(1)”、 “(3)” 和 “(5)”</td></tr><tr><td>\b</td><td>匹配一个单词的开始或结束的位置</td><td>er\b</td><td>匹配”never”中的”er”，但不能匹配”verb”中的”er”。</td></tr><tr><td>\B</td><td>匹配一个单词的中间位置</td><td>er\B</td><td>匹配”verb”中的”er”，但不能匹配”never”中的”er”。</td></tr></tbody></table><h3 id="分组构造"><a href="#分组构造" class="headerlink" title="分组构造"></a>分组构造</h3><p>分组构造描述了正则表达式的子表达式，并捕获输入字符串的子字符串。下表列出了常用的分组构造：</p><table><thead><tr><th>分组构造</th><th>描述</th><th>正则表达式</th><th>示例</th></tr></thead><tbody><tr><td>(subexpression)</td><td>捕获匹配的子表达式并将其分配到一个从零开始的序号中</td><td>(\w)\1</td><td>“deep” 中的 “ee”</td></tr><tr><td>(?<name>subexpression)</name></td><td>将匹配的子表达式捕获到一个命名组中</td><td>(?&lt; double&gt;\w)\k&lt; double&gt;</td><td>“deep” 中的 “ee”</td></tr><tr><td>(?&lt;name1 -name2&gt;subexpression)</td><td>定义平衡组</td><td>(((?’Open’()[^()]<em>)+((?’Close-Open’))[^()]</em>)+)*(?(Open)(?!))$</td><td>“3+2^((1-3)<em>(3-1))” 中的 “((1-3)</em>(3-1))”</td></tr><tr><td>(?: subexpression)</td><td>定义非捕获组</td><td>Write(?:Line)?</td><td>“Console.WriteLine()” 中的 “WriteLine”</td></tr><tr><td>(?imnsx-imnsx:subexpression)</td><td>应用或禁用 subexpression 中指定的选项</td><td>A\d{2}(?i:\w+)\b</td><td>“A12xl A12XL a12xl” 中的 “A12xl” 和 “A12XL”</td></tr><tr><td>(?&#x3D; subexpression)</td><td>零宽度正预测先行断言</td><td>\w+(?&#x3D;.)</td><td>“He is. The dog ran. The sun is out.” 中的 “is”、 “ran” 和 “out”</td></tr><tr><td>(?! subexpression)</td><td>零宽度负预测先行断言</td><td>\b(?!un)\w+\b</td><td>“unsure sure unity used” 中的 “sure” 和 “used”</td></tr><tr><td>(?&lt;&#x3D;subexpression)</td><td>零宽度正回顾后发断言</td><td>(?&lt;&#x3D;19)\d{2}\b</td><td>“1851 1999 1950 1905 2003” 中的 “99”、”50”和 “05”</td></tr><tr><td>(?</td><td>零宽度负回顾后发断言</td><td>(?</td><td>“Hi woman Hi man” 中的 “man”</td></tr><tr><td>(?&gt; subexpression)</td><td>非回溯（也称为”贪婪”）子表达式</td><td><a href="?%3EA+B+">13579</a></td><td>“1ABB 3ABBC 5AB 5AC” 中的 “1ABB”、 “3ABB” 和 “5AB”</td></tr></tbody></table><h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><p>限定符用来指定在字符串中必须存在某个元素（可以是字符、组或字符类）才能匹配成功。下表列出了常用的限定符：</p><table><thead><tr><th>限定符</th><th>描述</th><th>正则表达式</th><th>示例</th></tr></thead><tbody><tr><td>*</td><td>匹配上一个元素零次或多次</td><td>\d*.\d</td><td>“.0”、 “19.9”、 “219.9”</td></tr><tr><td>+</td><td>匹配上一个元素一次或多次</td><td>“be+”</td><td>匹配 “been” 中的 “bee”， “bent” 中的 “be”</td></tr><tr><td>?</td><td>匹配上一个元素零次或一次</td><td>“rai?n”</td><td>“ran”、 “rain”</td></tr><tr><td>{n}</td><td>匹配上一个元素 n 次</td><td>“,\d{3}”</td><td>匹配 “1,043.6” 中的 “,043”， “9,876,543,210” 中的 “,876”、 “,543” 和 “,210”</td></tr><tr><td>{n, }</td><td>匹配上一个元素至少 n 次</td><td>“\d{2,}”</td><td>“166”、 “29”、 “1930”</td></tr><tr><td>{n, m}</td><td>匹配上一个元素至少 n 次，但不多于 m 次</td><td>“\d{3,5}”</td><td>匹配 “166”， “17668”， “193024” 中的 “19302”</td></tr><tr><td>*?</td><td>匹配上一个元素零次或多次，但次数尽可能少</td><td>\d*?.\d</td><td>“.0”、 “19.9”、 “219.9”</td></tr><tr><td>+?</td><td>匹配上一个元素一次或多次，但次数尽可能少</td><td>“be+?”</td><td>匹配 “been” 中的 “be”， “bent” 中的 “be”</td></tr><tr><td>??</td><td>匹配上一个元素零次或一次，但次数尽可能少</td><td>“rai??n”</td><td>“ran”、 “rain”</td></tr><tr><td>{n}?</td><td>匹配前导元素恰好 n 次</td><td>“,\d{3}?”</td><td>匹配 “1,043.6” 中的 “,043”， “9,876,543,210” 中的 “,876”、 “,543” 和 “,210”</td></tr><tr><td>{n,}?</td><td>匹配上一个元素至少 n 次，但次数尽可能少</td><td>“\d{2,}?”</td><td>“166”、 “29” 和 “1930”</td></tr><tr><td>{n, m}?</td><td>匹配上一个元素的次数介于 n 和 m 之间，但次数尽可能少</td><td>“\d{3,5}?”</td><td>匹配 “166”， “17668”， “193024” 中的 “193” 和 “024”</td></tr></tbody></table><h3 id="反向引用构造"><a href="#反向引用构造" class="headerlink" title="反向引用构造"></a>反向引用构造</h3><p>反向引用构造允许先前匹配的子表达式随后在相同的正则表达式中进行标识。下表列出了常用的反向引用构造：</p><table><thead><tr><th>反向引用构造</th><th>描述</th><th>正则表达式</th><th>示例</th></tr></thead><tbody><tr><td>\number</td><td>反向引用，匹配编号子表达式的值</td><td>(\w)\1</td><td>匹配 “seek” 中的 “ee”</td></tr><tr><td>\k<name></name></td><td>命名反向引用，匹配命名表达式的值</td><td>(?&lt; char&gt;\w)\k&lt; char&gt;</td><td>匹配 “seek” 中的 “ee”</td></tr></tbody></table><h3 id="备用构造"><a href="#备用构造" class="headerlink" title="备用构造"></a>备用构造</h3><p>备用构造用于修改正则表达式以启用 either&#x2F;or 匹配。下表列出了常用的备用构造：</p><table><thead><tr><th>备用构造</th><th>描述</th><th>正则表达式</th><th>示例</th></tr></thead><tbody><tr><td>|</td><td>匹配以竖线|字符分隔的任何一个元素</td><td>th(e|is|at)</td><td>匹配 “this is the day. “ 中的 “the” 和 “this”</td></tr><tr><td>(?( expression )yes | no)</td><td>如果正则表达式模式由 expression 匹配指定，则匹配 yes 部分；否则匹配可选的 no 部分，expression 被解释为零宽度断言</td><td>(?(A)A\d{2}\b|\b\d{3}\b)</td><td>匹配 “A10 C103 910” 中的 “A10” 和 “910”</td></tr><tr><td>(?( name )yes | no )</td><td>如果 name 或已命名或已编号的捕获组具有匹配，则匹配 yes 部分；否则匹配可选的 no 部分。</td><td>(?&lt; quoted&gt;”)?(?(quoted).+?”|\S+\s)</td><td>匹配 “Dogs.jpg “Yiska playing.jpg”” 中的 Dogs.jpg 和 “Yiska playing.jpg”</td></tr></tbody></table><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><p>替换是替换模式中使用的正则表达式。下表列出了用于替换的字符：</p><table><thead><tr><th>字符</th><th>描述</th><th>模式</th><th>替换模式</th><th>输入字符串</th><th>结果字符串</th></tr></thead><tbody><tr><td>$number</td><td>替换按组 number 匹配的子字符串</td><td>\b(\w+)(\s)(\w+)\b</td><td>$3$2$1</td><td>“one two”</td><td>“two one”</td></tr><tr><td>${name}</td><td>替换按命名组 name 匹配的子字符串</td><td>\b(?&lt; word1&gt;\w+)(\s)(?&lt; word2&gt;\w+)\b</td><td>${word2} ${word1}</td><td>“one two”</td><td>“two one”</td></tr><tr><td>$$</td><td>替换字符”$”</td><td>\b(\d+)\s?USD</td><td>$$$1</td><td>“103 USD”</td><td>“$103”</td></tr><tr><td>$&amp;</td><td>替换整个匹配项的一个副本</td><td>($<em>(\d</em>(.+\d+)?){1})</td><td>**$&amp;</td><td>“$1.30”</td><td>“**$1.30**“</td></tr><tr><td>$&#96;</td><td>替换匹配前的输入字符串的所有文本</td><td>B+</td><td>$&#96;</td><td>“AABBCC”</td><td>“AAAACC”</td></tr><tr><td>$’</td><td>替换匹配后的输入字符串的所有文本</td><td>B+</td><td>$’</td><td>“AABBCC”</td><td>“AACCCC”</td></tr><tr><td>$+</td><td>替换最后捕获的组</td><td>B+(C+)</td><td>$+</td><td>“AABBCCDD”</td><td>AACCDD</td></tr><tr><td>$_</td><td>替换整个输入字符串</td><td>B+</td><td>$_</td><td>“AABBCC”</td><td>“AAAABBCCCC”</td></tr></tbody></table><h3 id="杂项构造"><a href="#杂项构造" class="headerlink" title="杂项构造"></a>杂项构造</h3><p>下表列出了各种杂项构造：</p><table><thead><tr><th>构造</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>(?imnsx-imnsx)</td><td>在模式中间对诸如不区分大小写这样的选项进行设置或禁用</td><td>\bA(?i)b\w+\b 匹配 “ABA Able Act” 中的 “ABA” 和 “Able”</td></tr><tr><td>(?#注释)</td><td>内联注释。该注释在第一个右括号处终止</td><td>\bA(?# 匹配以 A 开头的单词 )\w+\b</td></tr><tr><td>#[行尾]</td><td>该注释以非转义的 # 开头，并继续到行的结尾</td><td>(?x)\bA\w+\b# 匹配以 A 开头的单词</td></tr></tbody></table><h3 id="Regex-类"><a href="#Regex-类" class="headerlink" title="Regex 类"></a>Regex 类</h3><p>Regex 类用于使用一个正则表达式，下表中列出了 Regex 类中一些常用的方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>public bool IsMatch( string input )</td><td>指示 Regex 构造函数中指定的正则表达式是否在指定的输入字符串中找到匹配项</td></tr><tr><td>public bool IsMatch( string input, int startat )</td><td>指示 Regex 构造函数中指定的正则表达式是否在指定的输入字符串中找到匹配项，从字符串中指定的位置开始查找</td></tr><tr><td>public static bool IsMatch( string input, string pattern )</td><td>指示指定的正则表达式是否在指定的输入字符串中找到匹配项</td></tr><tr><td>public MatchCollection Matches( string input )</td><td>在指定的输入字符串中搜索正则表达式的所有匹配项</td></tr><tr><td>public string Replace( string input, string replacement )</td><td>在指定的输入字符串中，把所有匹配正则表达式模式的所有匹配的字符串替换为指定的替换字符串</td></tr><tr><td>public string[] Split( string input )</td><td>把输入字符串分割为子字符串数组，根据在 Regex 构造函数中指定的正则表达式模式定义的位置进行分割</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">这篇文章详细介绍了C#正则表达式的全面知识，包括其组成、各类字 符、运算符和结构，如转义字符、字符类、定位符、分组构造、限定符、反向引用构造、备用构造和替换等，每种构造都附有详细的描述、正则表达式示例和应 用场景，例如转义字符用于表示特殊字符，字符类用于匹配特定范围的字符，定位符用于确定匹配位置，分组构造用于捕获子字符串，限定符用于指定元素出现 次数，反向引用构造用于引用先前匹配的子表达式，备用构造用于实现either/or匹配，替换则用于在替换模式中使用正则表达式，文章内容详实，是学习和使用C#正则表达式的宝贵资源。</summary>
    
    
    
    <category term="技术分享" scheme="https://www.codeobservatory.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="C#" scheme="https://www.codeobservatory.cn/tags/C/"/>
    
    <category term="正则表达式" scheme="https://www.codeobservatory.cn/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>如何处理:无法使用虚拟目录密码作为用户 administrator（或其他用户） 在本地登录到（发布文件路径）</title>
    <link href="https://www.codeobservatory.cn/archives/309e0e9e.html"/>
    <id>https://www.codeobservatory.cn/archives/309e0e9e.html</id>
    <published>2025-06-13T00:56:20.000Z</published>
    <updated>2025-06-13T01:02:17.394Z</updated>
    
    <content type="html"><![CDATA[<p>如何解决修改服务器密码后网站显示无法使用虚拟目录密码作为administrator在本地登录到网站目录</p><p><strong>问题描述</strong>：</p><p>修改服务器密码后，IIS中设置的仍是旧密码，导致网站运行出现报错：网站HTTP 错误 500.19问题，如下图所示：</p><p><img src="https://images.codeobservatory.cn/hexo/202506/13/2928b0ea82aac092.png" alt="如何处理:无法使用虚拟目录密码作为用户 administrator（或其他用户） 在本地登录到（发布文件路径）"></p><p><strong>解决方案</strong>：</p><ol><li><p>在服务器文件管理中输入路径：C:\Windows\System32\inetsrv\config</p></li><li><p>找到文件：<code>applicationHost.config</code> ，并打开该文件</p></li><li><p>根据您的站点名称查找标签<code>&lt;application path=&quot;/&quot; applicationPool=&quot;fnsxy&quot;&gt;</code>，<code>applicationPool=“站点名称”</code> 下的标签 <code>&lt;virtualDirectory&gt;</code></p></li></ol><p>例如下图：</p><p><img src="https://images.codeobservatory.cn/hexo/202506/13/12771af30b0d37a4.png" alt="如何处理:无法使用虚拟目录密码作为用户 administrator（或其他用户） 在本地登录到（发布文件路径）"></p><ol start="4"><li><p>删除其属性及值：<code>userName</code> 和 <code>password</code></p></li><li><p>然后保存退出。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如何解决修改服务器密码后网站显示无法使用虚拟目录密码作为administrator在本地登录到网站目录&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题描述&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;修改服务器密码后，IIS中设置的仍是旧密码，导致网站运行出现报错：网站HTTP 错误 500.1</summary>
      
    
    
    
    <category term="技术分享" scheme="https://www.codeobservatory.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="IIS" scheme="https://www.codeobservatory.cn/tags/IIS/"/>
    
  </entry>
  
  <entry>
    <title>五年深漂画了个圆：从龙岗出租屋出发，又回到龙岗出租屋</title>
    <link href="https://www.codeobservatory.cn/archives/240abd01.html"/>
    <id>https://www.codeobservatory.cn/archives/240abd01.html</id>
    <published>2025-06-06T01:48:28.000Z</published>
    <updated>2025-06-07T02:55:15.925Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>五年了，整整五年！我回来了，竟又站在当初的起点上。</p></blockquote><p><img src="https://images.codeobservatory.cn/hexo/202506/06/4d086e061d950a7b92cec7d3eb2f96d6f3d3c939.jpeg" alt="沈川超海边照"><br><strong>2020年6月</strong>： 疫情初起的夏天，世界被按下了暂停键，我和女友却带着一股子懵懂的热气，踏进了深圳龙岗坪地。她一头扎进运营推广的工作里，我休整几天后，三份简历投向罗湖、水贝、龙华——最终，龙华一家网络科技公司向我招手，<code>一份敲敲打打的软件开发差事就此落定</code>。为了省却初来乍到的通勤奔波，我暂且寄居在民乐朋友家的屋檐下。</p><p><strong>2020年9月</strong>： 我们搬到了丹竹头沙岭小区，开始了早出晚归的日子，日日被公交车吞没又吐出。日子在疫情下的不安与奔忙中悄然流过。</p><p><strong>2021年底</strong>： 在疫情的余波中，<code>我们终于领了证，成为了法定意义上的夫妻。</code>只是那场期盼已久的婚礼，终究被疫情的阴影笼罩，办得仓促又带着几分未能圆满的小遗憾，成了心头一个淡淡的印记。</p><p><img src="https://images.codeobservatory.cn/hexo/202506/06/29381f30e924b899604731778cf8e99a0b7bf611.webp" alt="沈川超妻子合照"><br><strong>2022年中</strong>： 生活继续向前滚动。妻子怀孕了，在她身怀六甲、即将显怀的五个月时，为了让她能更安稳地待产，我将她送回了老家休养。彼时，我们已搬离丹竹头，住过短暂的大破头村，又挤在黄金坑小区朋友的单间里。通勤的路途却越来越像一条漫长的绳索，勒得人疲惫不堪，每日往返龙华耗费太多精力。</p><p><strong>2023年春节</strong>： <code>这个春节，意义非凡。我早早请好了假，回到老家，寸步不离地守在妻子身边。当喜庆的鞭炮声响彻夜空时，我们的第一个小宝贝在期待与守护中呱呱坠地。</code> 新生命的嘹亮啼哭，与窗外辞旧迎新的喧闹交织在一起，冲散了疫情残留的最后一丝阴霾。这一次，我没有错过。我紧握着妻子的手，亲眼见证了这个小生命的降临，那份初为人父的震颤与无与伦比的喜悦，沉甸甸地填满了整个产房。 这份全程的陪伴，让这个春节拥有了抵御一切艰辛的温暖底色。孩子满月后： 在老家悉心照料妻儿，看着小家伙一天天变得红润饱满。直到孩子稳稳当当地过了满月，一切安顿妥当，我才怀着万般不舍，告别父母妻儿，独自返回深圳复职。 离别时，妻子怀中安睡的小脸和我转身时她微红的眼眶，成了心底最柔软的牵挂。我回到了黄金坑的朋友单间，继续着往返龙华的漫长通勤，但心中多了一份沉甸甸的甜蜜负担。</p><p><strong>2024年6月</strong>： 恰巧朋友也谈了女朋友，本就局促的单间空间更显紧张。通勤的疲惫与居住的不便交织，我最终决定独自一人，从黄金坑搬到了龙华公司附近居住。这仿佛是一次割舍，只为在日复一日的路途上省下一点喘息的时间。只是这份独居，也意味着与远在老家的妻儿空间上的距离更显遥远，那间小小的出租屋，有时安静得能听见自己的心跳，思念无声却沉重。此后近一年，我便独自住在公司附近，每日往返于住所与办公室之间，两点一线。</p><p><strong>2025年4月</strong>： 对那份难以企及的待遇，积蓄已久的念头终于落地，我松开了手选择离职。没有太多犹豫，我直接回到了久别的老家。这一次，是真正地陪伴——陪伴日渐年迈的父母，也带着妻儿回了一趟她遥远的娘家，用心弥补着那些因奔波而错过的时光。身心在故土炊烟的温暖和孩子的咿呀学语声中渐渐熨帖舒展。</p><p><strong>2025年5月底</strong>： 未曾想，生活的河流在看似平静的故土岸边又陡然转折。五月底，手机响起，一家PCB制造公司的老板亲自打来电话，力邀我前往深圳负责系统研发的技术支持。一个重新出发的机会摆在眼前。</p><p><strong>2025年6月初</strong>： 权衡之后，我拖家带口，再次汇入了深圳奔涌不息的潮水中。</p><p><strong>此刻（2025年6月）</strong>： 重新寻找安身之所，脚步不由自主地在龙岗旧地徘徊。目光掠过那些街道与楼宇，一种模糊却强烈的熟悉感悄然缠绕上来。直到在某个小区门口站定，环顾四周，心猛地一跳——这不正是五年前，2020年那个夏天，我们初来深圳落脚的那个地方吗？同一个院落，同一方天空下的屋檐，在流转的时光里静默地伫立着，仿佛一个轮回的终点与起点在此刻重合。我抬头望见楼宇依旧，却不知哪一扇窗后，曾住着五年前那两个揣着忐忑与无限憧憬的年轻人。时光的痕迹已无声地刻在每一寸熟悉的砖石上。我站在这里，五年的颠簸与辗转如潮水般在心头翻涌：<em><strong>从挤在丹竹头公交里披星戴月的青涩，到黄金坑单间中拥挤与思念交织的岁月；从疫情阴影下仓促婚礼的淡淡遗憾，到2023年春节老家产房里，紧握妻子手时那份滚烫的激动与守护新生命降生的圆满；从2024年独自搬到龙华公司附近那安静得能听见心跳的独居时光，再到今日带着妻儿重返这最初的落脚点。这小小的出租屋群落，仿佛成了命运的锚点，任凭我如舟船般在生活的潮汐中起伏漂泊——求职、成家、守护、分离、团聚、离职、再出发——最终竟又被无形的绳索牵引着，绕回了出发的岸边。五年光阴，在这座永不停歇的城市里，是出租屋门牌的一次次更换，是地铁车厢里一张张疲惫面孔的无声交替，更是我从一个懵懂青年，一步步蜕变为丈夫、父亲的生命印记。</strong></em></p><p>夕阳把我们的身影和楼影一同拉得很长。这片五年前初来乍到、充满未知与迷茫的土地，如今却成了我携家带口重新扬帆的起点。我驻足于熟悉的小区门口，望着前方延伸的道路——它依然带着些许陌生，却又从骨子里透出难以言喻的熟悉气息。暮色温柔沉降，五年前那对年轻情侣背着行囊的身影，在记忆的深处无声浮动，他们眼中初生牛犊的莽撞光芒，与此刻我肩头沉甸甸的责任、身边妻儿的温暖依偎，以及脑海中永远定格的、在老家产房迎接新生命时那束明亮的灯光，在时光的滤镜下悄然重叠。我深吸一口这南方六月湿润而熟悉的空气，更紧地握住了家人的手，迈开脚步，坚定地向前走去：<span style="color: red;">路，依然在脚下延伸，而我们的故事，也依然在深圳这片热土上，继续被一步一个脚印地丈量着。</span></p>]]></content>
    
    
    <summary type="html">这篇文章讲述了作者五年深漂生活的完整历程，从2020年疫情初期与女友来到深圳龙岗坪地开始，经历了多次搬家、工作变动、结婚生子等人生大事，最终在2025年又回到最初落脚的龙岗出租屋，形成一个完整的轮回。文章详细描述了作者在深圳的奋斗与生活，包括疫情下的工作、婚礼的遗憾、妻儿回老家的思念、初为人父的喜悦、独自在深圳打拼的孤独，以及最终选择回归家庭的决定，展现了五年间从青涩青年到丈夫、父亲的成长与蜕变，以及在深圳这座城市的拼搏与坚守。</summary>
    
    
    
    <category term="生活随笔" scheme="https://www.codeobservatory.cn/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="https://www.codeobservatory.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="深圳" scheme="https://www.codeobservatory.cn/tags/%E6%B7%B1%E5%9C%B3/"/>
    
    <category term="心路历程" scheme="https://www.codeobservatory.cn/tags/%E5%BF%83%E8%B7%AF%E5%8E%86%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>如何给Hexo-butterfly主题博客在复制时添加版权声明</title>
    <link href="https://www.codeobservatory.cn/archives/321b85ec.html"/>
    <id>https://www.codeobservatory.cn/archives/321b85ec.html</id>
    <published>2025-06-03T09:00:40.000Z</published>
    <updated>2025-06-05T06:40:12.311Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>文章被盗，被爬取，内容被cv，你是否很苦恼？<br>被复制时，自动给文章内容添加原文信息。🤣</p><h1 id="1、确认需要版权声明的位置"><a href="#1、确认需要版权声明的位置" class="headerlink" title="1、确认需要版权声明的位置"></a>1、确认需要版权声明的位置</h1><p>通常情况下都是在拷贝博客详情内容时才给拷贝的内容添加版权信息，如果不管拷贝哪里的内容都给添加版权声明，影响用户体验。所以第一步确定博文详细内容在哪个标签中。这里我用的butterfly(蝴蝶)主题，他的文章主体内容在<div id="article-container">标签中<br><img src="https://images.codeobservatory.cn/hexo/202506/03/20250603173739.png" alt="文章主体内容标签"></div></p><h1 id="2、编写版权声明的js"><a href="#2、编写版权声明的js" class="headerlink" title="2、编写版权声明的js"></a>2、编写版权声明的js</h1><p>js已写好，直接复制，替换自己的信息即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">script.</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">setClipboardText</span>(<span class="params">event</span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> clipboardData = event.<span class="property">clipboardData</span> || <span class="variable language_">window</span>.<span class="property">clipboardData</span>;</span><br><span class="line">          <span class="keyword">if</span> (!clipboardData) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">          event.<span class="title function_">preventDefault</span>();</span><br><span class="line">          <span class="keyword">let</span> text = <span class="variable language_">window</span>.<span class="title function_">getSelection</span>().<span class="title function_">toString</span>();</span><br><span class="line">          <span class="keyword">if</span> (text) &#123;</span><br><span class="line">              event.<span class="title function_">preventDefault</span>();</span><br><span class="line">              <span class="keyword">var</span> copyright = <span class="string">&#x27;\n\n&#x27;</span></span><br><span class="line">              + <span class="string">&#x27;\n著作权归作者所有。&#x27;</span></span><br><span class="line">              + <span class="string">&#x27;\n商业转载请联系作者获得授权，非商业转载请注明出处。&#x27;</span></span><br><span class="line">              + <span class="string">&#x27;\n作者: 码农刚子&#x27;</span></span><br><span class="line">              + <span class="string">&#x27;\n邮箱: wxscc@foxmail.com&#x27;</span></span><br><span class="line">              + <span class="string">&#x27;\n原文地址: &#x27;</span> + <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>;</span><br><span class="line">              clipboardData.<span class="title function_">setData</span>(<span class="string">&#x27;text/plain&#x27;</span>, text + copyright);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> contents = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;article-container&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span>(contents)&#123;</span><br><span class="line">        contents.<span class="title function_">addEventListener</span>(<span class="string">&#x27;copy&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">            <span class="title function_">setClipboardText</span>(e);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>&lt;%&#x3D; page.permalink %&gt;: 当前页面链接<br>因为我们只是需要监听博客详情页的复制事件，所以我们可以直接将这段js放在博文详情页末尾。themes&#x2F;butterfly[主题的名字]&#x2F;layout&#x2F;post.pug这个文件是生成博客详情的模板。</p><h1 id="3、启动测试"><a href="#3、启动测试" class="headerlink" title="3、启动测试"></a>3、启动测试</h1><p>执行hexo clean和hexo generate清除通过修改前生成的页面，然后再根据修改后模板生成新的页面。然后执行hexo server启动测试。效果如下图<br><img src="https://images.codeobservatory.cn/hexo/202506/03/20250603175723.png" alt="版权声明截图"></p><h1 id="4、设置文章是否需要添加版权声明"><a href="#4、设置文章是否需要添加版权声明" class="headerlink" title="4、设置文章是否需要添加版权声明"></a>4、设置文章是否需要添加版权声明</h1><p>如果我们是转载其他作者的文章，这种情况下肯定是不能添加自己的版权声明要去掉。</p><ol><li>在文章头部添加一个<code>copyright</code>属性设置为<code>false</code><br><img src="https://images.codeobservatory.cn/hexo/202506/03/20250603174905.png" alt="添加copyright属性"><br>默认没有此属性，也相当于true，所有文章都默认加版权声明，直有copyright为false时不加版权声明</li><li>在刚刚加js代码的地方再加一行</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="keyword">if</span> page.<span class="property">copyright</span> !== <span class="literal">false</span> </span><br><span class="line">    script.</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">setClipboardText</span>(<span class="params">event</span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> clipboardData = event.<span class="property">clipboardData</span> || <span class="variable language_">window</span>.<span class="property">clipboardData</span>;</span><br><span class="line">          <span class="keyword">if</span> (!clipboardData) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">          event.<span class="title function_">preventDefault</span>();</span><br><span class="line">          <span class="keyword">let</span> text = <span class="variable language_">window</span>.<span class="title function_">getSelection</span>().<span class="title function_">toString</span>();</span><br><span class="line">          <span class="keyword">if</span> (text) &#123;</span><br><span class="line">              event.<span class="title function_">preventDefault</span>();</span><br><span class="line">              <span class="keyword">var</span> copyright = <span class="string">&#x27;\n\n&#x27;</span></span><br><span class="line">              + <span class="string">&#x27;\n著作权归作者所有。&#x27;</span></span><br><span class="line">              + <span class="string">&#x27;\n商业转载请联系作者获得授权，非商业转载请注明出处。&#x27;</span></span><br><span class="line">              + <span class="string">&#x27;\n作者: 码农刚子&#x27;</span></span><br><span class="line">              + <span class="string">&#x27;\n邮箱: wxscc@foxmail.com&#x27;</span></span><br><span class="line">              + <span class="string">&#x27;\n原文地址: &#x27;</span> + <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>;</span><br><span class="line">              clipboardData.<span class="title function_">setData</span>(<span class="string">&#x27;text/plain&#x27;</span>, text + copyright);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> contents = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;article-container&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span>(contents)&#123;</span><br><span class="line">        contents.<span class="title function_">addEventListener</span>(<span class="string">&#x27;copy&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">            <span class="title function_">setClipboardText</span>(e);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;文章被盗，被爬取，内容被cv，你是否很苦恼？&lt;br&gt;被复制时，自动给文章内容添加原文信息。🤣&lt;/p&gt;
&lt;h1 id=&quot;1、确认需要版权声明</summary>
      
    
    
    
    <category term="博客教程" scheme="https://www.codeobservatory.cn/categories/%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="hexo" scheme="https://www.codeobservatory.cn/tags/hexo/"/>
    
    <category term="butterfly" scheme="https://www.codeobservatory.cn/tags/butterfly/"/>
    
    <category term="版权声明" scheme="https://www.codeobservatory.cn/tags/%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E/"/>
    
  </entry>
  
  <entry>
    <title>使用C#实现23种常见的设计模式</title>
    <link href="https://www.codeobservatory.cn/archives/d8d7f62c.html"/>
    <id>https://www.codeobservatory.cn/archives/d8d7f62c.html</id>
    <published>2025-05-29T01:53:50.000Z</published>
    <updated>2025-05-29T02:02:10.422Z</updated>
    
    <content type="html"><![CDATA[<p>设计模式是软件开发人员在设计和实现软件时可以重复使用的解决方案。在C#中实现23种常见的设计模式需要对每种模式的实现细节进行深入理解。这里我会简述一些常见的设计模式，但具体的实现代码可能会比较长，因此我这里只展示每个模式的概述和关键点。</p><p>1、单例模式（Singleton）：确保一个类只有一个实例，并提供一个全局访问点。</p><p>2、工厂模式（Factory）：用于创建对象，将对象的创建与使用分离。</p><p>3、建造者模式（Builder）：通过将一个复杂对象的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。</p><p>4、原型模式（Prototype）：通过复制已有对象来创建新对象。</p><p>5、适配器模式（Adapter）：将一个类的接口转换成客户端所期望的另一个接口，使得原本由于接口不兼容而无法协同工作的类能够一起工作。</p><p>6、桥接模式（Bridge）：将抽象与实现解耦，使它们可以独立变化。</p><p>7、组合模式（Composite）：允许你将对象组合成树形结构来表示“部分-整体”的层次结构，使得客户端以统一的方式处理单个对象以及对象的组合。</p><p>8、装饰器模式（Decorator）：动态地给一个对象添加一些额外的职责，就增加功能来说，装饰器模式相比生成子类更为灵活。</p><p>9、外观模式（Facade）：为子系统中的一组接口提供一个一致的界面，简化子系统的使用。</p><p>10、享元模式（Flyweight）：运用共享技术有效地支持大量细粒度的对象。</p><p>11、观察者模式（Observer）：定义对象之间的一对多依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知并被自动更新。</p><p>12、中介者模式（Mediator）：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而降低耦合度。</p><p>13、代理模式（Proxy）：为其他对象提供一种代理以控制对这个对象的访问。</p><p>14、迭代器模式（Iterator）：提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表示。</p><p>15、组合模式（Composite）：将对象组合成树形结构以表示“部分-整体”的层次结构，使得客户端以统一的方式处理单个对象以及对象的组合。</p><p>16、状态模式（State）：允许一个对象在其内部状态改变时改变它的行为。</p><p>17、策略模式（Strategy）：定义一系列的算法，将每一个算法封装起来，并且使它们可以相互替换。</p><p>18、模板方法模式（Template Method）：定义一个操作中的算法骨架，将某些步骤延迟到子类中实现。</p><p>19、职责链模式（Chain of Responsibility）：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。</p><p>20、备忘录模式（Memento）：在不破坏封装的前提下捕获一个对象的内部状态，并在该对象之外保存这个状态。</p><p>21、解释器模式（Interpreter）：定义一个解释器类，该类解析并执行一种简单的语法结构。</p><p>22、观察者模式（Observer）：定义了对象之间的一对多依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知并被自动更新。</p><p>23、访问者模式（Visitor）：将数据操作与数据结构分离，使得同一组操作可以作用于不同的数据结构。</p>]]></content>
    
    
    <summary type="html">设计模式是软件开发人员在设计和实现软件时可以重复使用的解决方案。在C#中实现23种常见的设计模式需要对每种模式的实现细节进行深入理解。这里我会简述一些常见的设计模式，但具体的实现代码可能会比较长，因此我这里只展示每个模式的概述和关键点。</summary>
    
    
    
    <category term="后端开发" scheme="https://www.codeobservatory.cn/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="C#" scheme="https://www.codeobservatory.cn/tags/C/"/>
    
    <category term="设计模式" scheme="https://www.codeobservatory.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>SQL SERVER数据库跨服务器查询</title>
    <link href="https://www.codeobservatory.cn/archives/a1b7d00f.html"/>
    <id>https://www.codeobservatory.cn/archives/a1b7d00f.html</id>
    <published>2025-05-29T01:39:27.000Z</published>
    <updated>2025-05-29T01:48:45.249Z</updated>
    
    <content type="html"><![CDATA[<p>1、执行存储过程 sp_addlinkedserver 以将服务器添加到 sys.servers。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--server72为远程服务器的别名</span></span><br><span class="line"><span class="keyword">exec</span> sp_addlinkedserver <span class="string">&#x27;server72&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;SQLOLEDB &#x27;</span>, <span class="string">&#x27;远程服务器名或ip地址 &#x27;</span> </span><br><span class="line"><span class="keyword">exec</span> sp_addlinkedsrvlogin <span class="string">&#x27;server72&#x27;</span>, <span class="string">&#x27;false &#x27;</span>,<span class="keyword">null</span>, <span class="string">&#x27;用户名 &#x27;</span>, <span class="string">&#x27;密码 &#x27;</span></span><br></pre></td></tr></table></figure><p>2、跨服务器查询时，需要按照下列格式指定查询表添加的远程服务器别名</p><ul><li>数据库名</li><li>数据库的schema，一般是dbo</li><li>表名称</li><li>查询示例</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> server72.数据库名.dbo.表名</span><br></pre></td></tr></table></figure><p>3、查询服务器中已有的linkserver信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> SYS.LINKED_LOGINS;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> SYS.SERVERS;</span><br></pre></td></tr></table></figure><p>4、删除已经存在的链接服务器</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IF <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> sys.servers <span class="keyword">WHERE</span> name <span class="operator">=</span> N<span class="string">&#x27;server72&#x27;</span>)</span><br><span class="line"><span class="keyword">EXEC</span> master.sys.sp_dropserver <span class="string">&#x27;server72&#x27;</span>,<span class="string">&#x27;droplogins&#x27;</span>  </span><br><span class="line">GO</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1、执行存储过程 sp_addlinkedserver 以将服务器添加到 sys.servers。&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;</summary>
      
    
    
    
    <category term="数据库" scheme="https://www.codeobservatory.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="sql" scheme="https://www.codeobservatory.cn/tags/sql/"/>
    
    <category term="数据库" scheme="https://www.codeobservatory.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-butterfly文章顶部添加波浪效果</title>
    <link href="https://www.codeobservatory.cn/archives/2aebdcfd.html"/>
    <id>https://www.codeobservatory.cn/archives/2aebdcfd.html</id>
    <published>2025-05-28T08:44:31.000Z</published>
    <updated>2025-05-28T08:54:59.743Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开始步骤"><a href="#开始步骤" class="headerlink" title="开始步骤"></a>开始步骤</h2><p>修改 themes&#x2F;butterfly&#x2F;layout&#x2F;includes&#x2F;header&#x2F;index.pug 大概第 33 行左右</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">if top_img !== false</span><br><span class="line">  if is_post()</span><br><span class="line">    include ./post-info.pug</span><br><span class="line"><span class="addition">+   section.main-hero-waves-area.waves-area</span></span><br><span class="line"><span class="addition">+     svg.waves-svg(xmlns=&#x27;http://www.w3.org/2000/svg&#x27;, xlink=&#x27;http://www.w3.org/1999/xlink&#x27;, viewBox=&#x27;0 24 150 28&#x27;, preserveAspectRatio=&#x27;none&#x27;, shape-rendering=&#x27;auto&#x27;)</span></span><br><span class="line"><span class="addition">+       defs</span></span><br><span class="line"><span class="addition">+         path#gentle-wave(d=&#x27;M -160 44 c 30 0 58 -18 88 -18 s 58 18 88 18 s 58 -18 88 -18 s 58 18 88 18 v 44 h -352 Z&#x27;)</span></span><br><span class="line"><span class="addition">+       g.parallax</span></span><br><span class="line"><span class="addition">+         use(href=&#x27;#gentle-wave&#x27;, x=&#x27;48&#x27;, y=&#x27;0&#x27;)</span></span><br><span class="line"><span class="addition">+         use(href=&#x27;#gentle-wave&#x27;, x=&#x27;48&#x27;, y=&#x27;3&#x27;)</span></span><br><span class="line"><span class="addition">+         use(href=&#x27;#gentle-wave&#x27;, x=&#x27;48&#x27;, y=&#x27;5&#x27;)</span></span><br><span class="line"><span class="addition">+         use(href=&#x27;#gentle-wave&#x27;, x=&#x27;48&#x27;, y=&#x27;7&#x27;)</span></span><br><span class="line">    #post-top-cover</span><br><span class="line">      img#post-top-bg(class=&#x27;nolazyload&#x27; src=bg_img)</span><br><span class="line">  else if is_home()</span><br><span class="line">    #site-info</span><br><span class="line">      h1#site-title=site_title</span><br><span class="line">      if theme.subtitle.enable</span><br></pre></td></tr></table></figure><p>为了方便复制，提供一份需要修改的部分:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">section.main-hero-waves-area.waves-area</span><br><span class="line">  svg.waves-svg(xmlns=<span class="string">&#x27;http://www.w3.org/2000/svg&#x27;</span>, xlink=<span class="string">&#x27;http://www.w3.org/1999/xlink&#x27;</span>, viewBox=<span class="string">&#x27;0 24 150 28&#x27;</span>, preserveAspectRatio=<span class="string">&#x27;none&#x27;</span>, shape-rendering=<span class="string">&#x27;auto&#x27;</span>)</span><br><span class="line">    defs</span><br><span class="line">      path#gentle-wave(d=<span class="string">&#x27;M -160 44 c 30 0 58 -18 88 -18 s 58 18 88 18 s 58 -18 88 -18 s 58 18 88 18 v 44 h -352 Z&#x27;</span>)</span><br><span class="line">    g.parallax</span><br><span class="line">      use(href=<span class="string">&#x27;#gentle-wave&#x27;</span>, x=<span class="string">&#x27;48&#x27;</span>, y=<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">      use(href=<span class="string">&#x27;#gentle-wave&#x27;</span>, x=<span class="string">&#x27;48&#x27;</span>, y=<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">      use(href=<span class="string">&#x27;#gentle-wave&#x27;</span>, x=<span class="string">&#x27;48&#x27;</span>, y=<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">      use(href=<span class="string">&#x27;#gentle-wave&#x27;</span>, x=<span class="string">&#x27;48&#x27;</span>, y=<span class="string">&#x27;7&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后在_config.butterfly.yml的 [inject.head] 或者自定义 css 中 引入以下 css, 不会的同学参考Hexo 博客添加自定义 css 和 js 文件</p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 波浪css */</span></span><br><span class="line"><span class="selector-class">.main-hero-waves-area</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">11px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.waves-area</span> <span class="selector-class">.waves-svg</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Animation */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.parallax</span> &gt; <span class="selector-tag">use</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: move-forever <span class="number">25s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.55</span>, <span class="number">0.5</span>, <span class="number">0.45</span>, <span class="number">0.5</span>) infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parallax</span> &gt; <span class="selector-tag">use</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="attribute">animation-delay</span>: -<span class="number">2s</span>;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">7s</span>;</span><br><span class="line">  <span class="attribute">fill</span>: <span class="number">#f7f9febd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parallax</span> &gt; <span class="selector-tag">use</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">animation-delay</span>: -<span class="number">3s</span>;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">10s</span>;</span><br><span class="line">  <span class="attribute">fill</span>: <span class="number">#f7f9fe82</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parallax</span> &gt; <span class="selector-tag">use</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  <span class="attribute">animation-delay</span>: -<span class="number">4s</span>;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">13s</span>;</span><br><span class="line">  <span class="attribute">fill</span>: <span class="number">#f7f9fe36</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parallax</span> &gt; <span class="selector-tag">use</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123;</span><br><span class="line">  <span class="attribute">animation-delay</span>: -<span class="number">5s</span>;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">20s</span>;</span><br><span class="line">  <span class="attribute">fill</span>: <span class="number">#f7f9fe</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 黑色模式背景 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.parallax</span> &gt; <span class="selector-tag">use</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="attribute">animation-delay</span>: -<span class="number">2s</span>;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">7s</span>;</span><br><span class="line">  <span class="attribute">fill</span>: <span class="number">#18171dc8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.parallax</span> &gt; <span class="selector-tag">use</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">animation-delay</span>: -<span class="number">3s</span>;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">10s</span>;</span><br><span class="line">  <span class="attribute">fill</span>: <span class="number">#18171d80</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.parallax</span> &gt; <span class="selector-tag">use</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  <span class="attribute">animation-delay</span>: -<span class="number">4s</span>;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">13s</span>;</span><br><span class="line">  <span class="attribute">fill</span>: <span class="number">#18171d3e</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.parallax</span> &gt; <span class="selector-tag">use</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123;</span><br><span class="line">  <span class="attribute">animation-delay</span>: -<span class="number">5s</span>;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">20s</span>;</span><br><span class="line">  <span class="attribute">fill</span>: <span class="number">#18171d</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> move-forever &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(-<span class="number">90px</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">85px</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Shrinking for mobile*/</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.waves-area</span> <span class="selector-class">.waves-svg</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">40px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>大功告成，需要注意的是 css 中fill属性可以控制波浪颜色，最好使其中一个颜色与背景颜色一致，否则会显的有点奇怪。</p><blockquote><p>参考：<a href="https://blog.anheyu.com/posts/98c4.html">https://blog.anheyu.com/posts/98c4.html</a></p></blockquote>]]></content>
    
    
    <summary type="html">这篇文章介绍了如何在Hexo博客主题Butterfly的文章顶部添加波浪效果，具体操作包括修改themes/butterfly/layout/includes/header/index.pug文件，在适当位置添加波浪效果的SVG代码，并在_config.butterfly.yml文件中引入相应的CSS样式以实现波浪动画效果，CSS代码控制波浪的宽度、位置、高度以及动画效果，包括不同子元素的动画延迟和持续时间，还提供了黑色模式下的背景颜色调整，最后提醒注意CSS中的fill属性可以控制波浪颜色，建议与背景颜色协调。</summary>
    
    
    
    <category term="博客教程" scheme="https://www.codeobservatory.cn/categories/%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="hexo" scheme="https://www.codeobservatory.cn/tags/hexo/"/>
    
    <category term="butterfly" scheme="https://www.codeobservatory.cn/tags/butterfly/"/>
    
    <category term="波浪" scheme="https://www.codeobservatory.cn/tags/%E6%B3%A2%E6%B5%AA/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-butterfly友情链接页面优化</title>
    <link href="https://www.codeobservatory.cn/archives/29606f1.html"/>
    <id>https://www.codeobservatory.cn/archives/29606f1.html</id>
    <published>2025-05-28T07:36:24.000Z</published>
    <updated>2025-06-06T07:58:02.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="预览效果"><a href="#预览效果" class="headerlink" title="预览效果"></a>预览效果</h2><blockquote><p><a href="/link/">👉效果和本站友链一样</a></p></blockquote><h2 id="首先生成link页面"><a href="#首先生成link页面" class="headerlink" title="首先生成link页面"></a>首先生成link页面</h2><p>在 Hexo 博客根目录 [Blogroot]下打开终端，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="built_in">link</span></span><br></pre></td></tr></table></figure><p>打开[Blogroot]\source\link\index.md,添加一行type: ‘link’:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 友情链接</span><br><span class="line">date: 2025-05-21 17:32:19</span><br><span class="line"><span class="section">type: &quot;link&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h2 id="创建数据文件"><a href="#创建数据文件" class="headerlink" title="创建数据文件"></a>创建数据文件</h2><p>新建文件[Blogroot]\source_data\link.yml,没有_data文件夹的话也请自己新建。以下是默认友链格式示例。打开[Blogroot]\source_data\link.yml，输入：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flink_style: butterfly / flexcard</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">这里的每个站点，都耐人寻味……</span></span><br><span class="line">  <span class="attr">flink_style:</span> <span class="string">flexcard</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">码农观测站</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.codeobservatory.cn/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://www.codeobservatory.cn/img/butterfly-icon.webp</span></span><br><span class="line">      <span class="attr">siteshot:</span> <span class="string">https://www.codeobservatory.cn/images/shot.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">技术分享，编程学习</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">技术</span></span><br></pre></td></tr></table></figure><h2 id="打开link菜单"><a href="#打开link菜单" class="headerlink" title="打开link菜单"></a>打开link菜单</h2><p>取消[Blogroot]_config.butterfly.yml中menu配置项内link页面的注释（这里我已改成中文【友链】）。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">文章:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="comment"># List||fas fa-list||hide:     # 移动端隐藏子菜单</span></span><br><span class="line">  <span class="comment">#   Music: /music/ || fas fa-music</span></span><br><span class="line">  <span class="comment">#   Movie: /movies/ || fas fa-video</span></span><br><span class="line">  <span class="string">友链:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><h2 id="替换模板文件"><a href="#替换模板文件" class="headerlink" title="替换模板文件"></a>替换模板文件</h2><p>替换[Blogroot]\themes\butterfly\layout\includes\page\flink.pug</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">.container</span><br><span class="line">  <span class="keyword">if</span> top_img === <span class="literal">false</span></span><br><span class="line">    h1.page-title= page.title</span><br><span class="line">  .flink</span><br><span class="line">    <span class="keyword">if</span> site.data.link</span><br><span class="line">      each i <span class="keyword">in</span> site.data.link</span><br><span class="line">        <span class="keyword">if</span> i.class_name</span><br><span class="line">          h2!= i.class_name</span><br><span class="line">        <span class="keyword">if</span> i.class_desc</span><br><span class="line">          .flink-desc!=i.class_desc        </span><br><span class="line">        <span class="keyword">if</span> i.flink_style === <span class="string">&#x27;flexcard&#x27;</span></span><br><span class="line">          .flexcard-flink-list</span><br><span class="line">            each item <span class="keyword">in</span> i.link_list</span><br><span class="line">              a.flink-list-card(href=url_for(item.link) target=<span class="string">&#x27;_blank&#x27;</span> data-title=item.descr)</span><br><span class="line">                .wrapper.cover</span><br><span class="line">                  <span class="keyword">if</span> item.type</span><br><span class="line">                    .is-type.is-type-0!=item.type</span><br><span class="line">                  - var siteshot = item.siteshot ? url_for(item.siteshot) : <span class="string">&#x27;https://image.thum.io/get/width/400/crop/800/allowJPG/wait/20/noanimate/&#x27;</span> + item.link</span><br><span class="line">                  <span class="keyword">if</span> theme.lazyload.enable</span><br><span class="line">                    img.cover.fadeIn(data-lazy-src=siteshot onerror=`this.onerror=null;this.src=<span class="string">&#x27;` + url_for(theme.error_img.post_page) + `&#x27;</span>` alt=<span class="string">&#x27;&#x27;</span> )</span><br><span class="line">                  <span class="keyword">else</span></span><br><span class="line">                    img.cover.fadeIn(src=siteshot onerror=`this.onerror=null;this.src=<span class="string">&#x27;` + url_for(theme.error_img.post_page) + `&#x27;</span>` alt=<span class="string">&#x27;&#x27;</span> )</span><br><span class="line">                .info</span><br><span class="line">                  <span class="keyword">if</span> theme.lazyload.enable</span><br><span class="line">                    img.flink-avatar(data-lazy-src=url_for(item.avatar) onerror=`this.onerror=null;this.src=<span class="string">&#x27;` + url_for(theme.error_img.flink) + `&#x27;</span>` alt=<span class="string">&#x27;&#x27;</span> )</span><br><span class="line">                  <span class="keyword">else</span></span><br><span class="line">                    img(src=url_for(item.avatar) onerror=`this.onerror=null;this.src=<span class="string">&#x27;` + url_for(theme.error_img.flink) + `&#x27;</span>` alt=<span class="string">&#x27;&#x27;</span> )</span><br><span class="line">                  span.flink-sitename= item.name</span><br><span class="line">                  span.flink-sitedesc(title=item.descr)= item.descr</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> i.flink_style === <span class="string">&#x27;butterfly&#x27;</span></span><br><span class="line">          .butterfly-flink-list</span><br><span class="line">            each item <span class="keyword">in</span> i.link_list</span><br><span class="line">              .flink-list-item</span><br><span class="line">                a(href=url_for(item.link)  title=item.name target=<span class="string">&quot;_blank&quot;</span>)</span><br><span class="line">                  .flink-item-icon</span><br><span class="line">                    <span class="keyword">if</span> theme.lazyload.enable</span><br><span class="line">                      img(data-lazy-src=url_for(item.avatar) onerror=`this.onerror=null;this.src=<span class="string">&#x27;` + url_for(theme.error_img.flink) + `&#x27;</span>` alt=item.name )</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                      img(src=url_for(item.avatar) onerror=`this.onerror=null;this.src=<span class="string">&#x27;` + url_for(theme.error_img.flink) + `&#x27;</span>` alt=item.name )</span><br><span class="line">                  .flink-item-info</span><br><span class="line">                    .flink-item-name= item.name</span><br><span class="line">                    .flink-item-desc(title=item.descr)= item.descr          </span><br><span class="line">    != page.content</span><br></pre></td></tr></table></figure><h2 id="替换样式文件"><a href="#替换样式文件" class="headerlink" title="替换样式文件"></a>替换样式文件</h2><p>替换[Blogroot]\themes\butterfly\source\css_page\flink.styl</p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#article-container</span></span><br><span class="line">  <span class="selector-class">.flink</span></span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span></span><br><span class="line">    <span class="selector-class">.flink-desc</span></span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> .<span class="number">6rem</span> <span class="meta">!important</span></span><br><span class="line">    <span class="selector-class">.butterfly-flink-list</span></span><br><span class="line">      <span class="attribute">overflow</span>: auto</span><br><span class="line">      <span class="attribute">text-align</span>: center</span><br><span class="line"></span><br><span class="line">      &amp; &gt; <span class="selector-class">.flink-list-item</span></span><br><span class="line">        <span class="attribute">position</span>: relative</span><br><span class="line">        <span class="attribute">float</span>: left</span><br><span class="line">        <span class="attribute">overflow</span>: hidden</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">15px</span> <span class="number">7px</span></span><br><span class="line">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> / <span class="number">3</span> - <span class="number">15px</span>)</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">90px</span></span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">17px</span></span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">addBorderRadius</span>(<span class="number">8</span>)</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#49b1f514</span></span><br><span class="line"></span><br><span class="line">        +<span class="built_in">maxWidth1024</span>()</span><br><span class="line">          <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">15px</span>) <span class="meta">!important</span></span><br><span class="line"></span><br><span class="line">        +<span class="built_in">maxWidth600</span>()</span><br><span class="line">          <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">15px</span>) <span class="meta">!important</span></span><br><span class="line"></span><br><span class="line">        <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">          <span class="selector-class">.flink-item-icon</span></span><br><span class="line">            <span class="attribute">margin-left</span>: -<span class="number">10px</span></span><br><span class="line">            <span class="attribute">width</span>: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">          <span class="attribute">position</span>: absolute</span><br><span class="line">          <span class="attribute">top</span>: <span class="number">0</span></span><br><span class="line">          <span class="attribute">right</span>: <span class="number">0</span></span><br><span class="line">          <span class="attribute">bottom</span>: <span class="number">0</span></span><br><span class="line">          <span class="attribute">left</span>: <span class="number">0</span></span><br><span class="line">          <span class="attribute">z-index</span>: -<span class="number">1</span></span><br><span class="line">          <span class="attribute">background</span>: <span class="built_in">var</span>(--text-bg-hover)</span><br><span class="line">          <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">          <span class="attribute">transition</span>: transform .<span class="number">3s</span> ease-out</span><br><span class="line">          <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="selector-pseudo">&amp;:hover</span><span class="selector-pseudo">:before</span>,</span><br><span class="line">        <span class="selector-pseudo">&amp;:focus</span><span class="selector-pseudo">:before</span>,</span><br><span class="line">        <span class="selector-pseudo">&amp;:active</span><span class="selector-pseudo">:before</span></span><br><span class="line">          <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">a</span></span><br><span class="line">          <span class="attribute">color</span>: <span class="built_in">var</span>(--font-color)</span><br><span class="line">          <span class="attribute">text-decoration</span>: none</span><br><span class="line"></span><br><span class="line">          <span class="selector-class">.flink-item-icon</span></span><br><span class="line">            <span class="attribute">float</span>: left</span><br><span class="line">            <span class="attribute">overflow</span>: hidden</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">15px</span> <span class="number">10px</span></span><br><span class="line">            <span class="attribute">width</span>: <span class="number">60px</span></span><br><span class="line">            <span class="attribute">height</span>: <span class="number">60px</span></span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">30%</span></span><br><span class="line">            <span class="attribute">transition</span>: width .<span class="number">3s</span> ease-out</span><br><span class="line"></span><br><span class="line">            <span class="selector-tag">img</span></span><br><span class="line">              <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">              <span class="attribute">height</span>: <span class="number">100%</span></span><br><span class="line">              <span class="attribute">transition</span>: filter <span class="number">375ms</span> ease-in .<span class="number">2s</span>, transform .<span class="number">3s</span></span><br><span class="line">              <span class="attribute">object-fit</span>: cover</span><br><span class="line"></span><br><span class="line">          <span class="selector-class">.img-alt</span></span><br><span class="line">            <span class="attribute">display</span>: none</span><br><span class="line">        </span><br><span class="line">        <span class="selector-pseudo">:hover</span> </span><br><span class="line">          <span class="attribute">color</span>: <span class="number">#fff</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.flexcard-flink-list</span></span><br><span class="line">      <span class="attribute">display</span>: flex</span><br><span class="line">      <span class="attribute">flex-wrap</span>: wrap</span><br><span class="line">      <span class="attribute">justify-content</span>: flex-start</span><br><span class="line">      <span class="attribute">margin</span>: -<span class="number">8px</span></span><br><span class="line">      <span class="attribute">align-items</span>: stretch</span><br><span class="line">      &gt; <span class="selector-class">.flink-list-card</span></span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">8px</span></span><br><span class="line">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> / <span class="number">4</span> - <span class="number">16px</span>)</span><br><span class="line">        <span class="attribute">display</span>: block</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">1.4</span></span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span></span><br><span class="line">        <span class="attribute">text-decoration</span>:none</span><br><span class="line">        <span class="selector-class">.cover</span></span><br><span class="line">          <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">          <span class="attribute">height</span>: <span class="number">120px</span></span><br><span class="line">          <span class="attribute">overflow</span>: hidden</span><br><span class="line">          <span class="attribute">border-radius</span>: <span class="number">6px</span></span><br><span class="line">          <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>)</span><br><span class="line">          <span class="attribute">background</span>: <span class="number">#f6f6f6</span></span><br><span class="line">          <span class="attribute">position</span>: relative</span><br><span class="line">          <span class="selector-class">.is-type</span></span><br><span class="line">            <span class="attribute">position</span>: absolute</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">0</span></span><br><span class="line">            <span class="attribute">left</span>: <span class="number">0</span></span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#fff</span></span><br><span class="line">            <span class="attribute">z-index</span>: <span class="number">10</span></span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">6px</span> <span class="number">0</span> <span class="number">6px</span> <span class="number">0</span></span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">8px</span></span><br><span class="line">            <span class="attribute">font-size</span>: .<span class="number">6rem</span></span><br><span class="line">            <span class="attribute">background-color</span>: <span class="built_in">var</span>(--btn-bg)</span><br><span class="line">          <span class="selector-tag">img</span></span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100%</span></span><br><span class="line">            <span class="attribute">pointer-events</span>: none</span><br><span class="line">            <span class="attribute">transition</span>: transform <span class="number">2s</span> ease</span><br><span class="line">            <span class="attribute">object-fit</span>: cover </span><br><span class="line">                 </span><br><span class="line">        <span class="selector-class">.info</span></span><br><span class="line">          <span class="attribute">margin-top</span>: <span class="number">8px</span></span><br><span class="line">          <span class="selector-tag">img</span></span><br><span class="line">            <span class="attribute">width</span>: <span class="number">32px</span></span><br><span class="line">            <span class="attribute">height</span>: <span class="number">32px</span></span><br><span class="line">            <span class="attribute">pointer-events</span>: none</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">16px</span></span><br><span class="line">            <span class="attribute">float</span>: left</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span> auto .<span class="number">1rem</span> <span class="meta">!important</span></span><br><span class="line">            <span class="attribute">margin-right</span>: <span class="number">8px</span> <span class="meta">!important</span></span><br><span class="line">          <span class="selector-class">.flink-sitename</span></span><br><span class="line">            <span class="attribute">font-weight</span>: <span class="number">600</span></span><br><span class="line">            <span class="attribute">font-size</span>: <span class="built_in">var</span>(--global-font-size)</span><br><span class="line">            <span class="attribute">color</span>: <span class="built_in">var</span>(--font-color)</span><br><span class="line">            <span class="attribute">display</span>: -webkit-box</span><br><span class="line">            -webkit-<span class="attribute">box-orient</span>: vertical</span><br><span class="line">            <span class="attribute">overflow</span>: hidden</span><br><span class="line">            -webkit-line-clamp: <span class="number">1</span></span><br><span class="line">            <span class="attribute">transition</span>: all <span class="number">0.28s</span> ease</span><br><span class="line">            -moz-<span class="attribute">transition</span>: all <span class="number">0.28s</span> ease</span><br><span class="line">            -webkit-<span class="attribute">transition</span>: all <span class="number">0.28s</span> ease</span><br><span class="line">            -o-<span class="attribute">transition</span>: all <span class="number">0.28s</span> ease</span><br><span class="line">          <span class="selector-class">.flink-sitedesc</span></span><br><span class="line">            <span class="attribute">margin-top</span>: <span class="number">4px</span> <span class="meta">!important</span></span><br><span class="line">            <span class="attribute">font-size</span>: <span class="built_in">var</span>(--global-font-size);</span><br><span class="line">            <span class="attribute">word-wrap</span>: break-word</span><br><span class="line">            <span class="attribute">line-height</span>: <span class="number">1.2</span></span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#888</span></span><br><span class="line">            <span class="attribute">display</span>: -webkit-box</span><br><span class="line">            -webkit-<span class="attribute">box-orient</span>: vertical</span><br><span class="line">            <span class="attribute">overflow</span>: hidden</span><br><span class="line">            -webkit-line-clamp: <span class="number">2</span></span><br><span class="line">      <span class="selector-pseudo">:hover</span></span><br><span class="line">        <span class="selector-class">.cover</span>  </span><br><span class="line">          <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">8px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>), <span class="number">0</span> <span class="number">2px</span> <span class="number">4px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>), <span class="number">0</span> <span class="number">4px</span> <span class="number">8px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>), <span class="number">0</span> <span class="number">8px</span> <span class="number">16px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>)  </span><br><span class="line">        <span class="selector-class">.flink-sitename</span></span><br><span class="line">          <span class="attribute">color</span>: <span class="built_in">var</span>(--tzy-theme) <span class="meta">!important</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.flink-item-name</span></span><br><span class="line">      <span class="keyword">@extend</span> <span class="selector-class">.limit-one-line</span></span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">16px</span> <span class="number">10px</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">      <span class="attribute">height</span>: <span class="number">40px</span></span><br><span class="line">      <span class="attribute">font-weight</span>: bold</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">1.43em</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.flink-item-desc</span></span><br><span class="line">      <span class="keyword">@extend</span> <span class="selector-class">.limit-one-line</span></span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">16px</span> <span class="number">10px</span> <span class="number">16px</span> <span class="number">0</span></span><br><span class="line">      <span class="attribute">height</span>: <span class="number">50px</span></span><br><span class="line">      <span class="attribute">font-size</span>: .<span class="number">93em</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.flink-name</span></span><br><span class="line">      <span class="attribute">margin-bottom</span>: <span class="number">5px</span></span><br><span class="line">      <span class="attribute">font-weight</span>: bold</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">1.5em</span></span><br></pre></td></tr></table></figure><p>这里需要注意的是需要在source&#x2F;_data&#x2F;link.yml添加配置项</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">flink_style:</span> <span class="string">flexcard</span> <span class="string">||</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><p>该参数可选值flexcard或者butterfly分别对应两种样式。<br>全部保存好之后，一键三连查看效果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo c; hexo g;hexo s </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">这篇文章介绍了如何优化Hexo博客中的友情链接页面，特别是使用Hexo-butterfly主题。首先，需要在博客根目录下创建一个新的友情链接页面，并在source/link/index.md文件中添加特定的配置。接着，创建一个数据文件source/_data/link.yml来存储友情链接的信息。然后，在博客的配置文件中启用友情链接菜单。最后，需要替换主题中的模板文件和样式文件，以实现自定义的友情链接页面布局和样式。文章详细列出了每一步的操作步骤和所需的代码示例。</summary>
    
    
    
    <category term="博客教程" scheme="https://www.codeobservatory.cn/categories/%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="hexo" scheme="https://www.codeobservatory.cn/tags/hexo/"/>
    
    <category term="butterfly" scheme="https://www.codeobservatory.cn/tags/butterfly/"/>
    
  </entry>
  
  <entry>
    <title>五大方法提高网站排名</title>
    <link href="https://www.codeobservatory.cn/archives/d9f9c7be.html"/>
    <id>https://www.codeobservatory.cn/archives/d9f9c7be.html</id>
    <published>2025-05-27T07:49:14.000Z</published>
    <updated>2025-06-06T08:58:03.754Z</updated>
    
    <content type="html"><![CDATA[<p>很多人问我，而且反复的问我，我的网站排名怎么一直上不去？我的网站排名怎么又掉了？最近百度大更新，我的网站被K了，怎么回事？不同的问题，但是回答的内容大同小异，今天<a href="https://www.codeobservatory.cn/">码农观测站</a>总结了五个方法提高网站排名，希望对你们有帮助。</p><h2 id="一、做好站内优化"><a href="#一、做好站内优化" class="headerlink" title="一、做好站内优化"></a>一、做好站内优化</h2><p>网站上线之前，做好站内优化，站内优化直接影响网站的收录情况。一般上线之后，是不需要再调整站内的布局及结构。但是可以根据网站的搜索引擎的排名情况，分析原因所在，可以适当的调整。一般情况下，影响排名的站内因素有：</p><ol><li>关键词没有定位好。我们要让关键词明确，适当的给关键词加粗，斜体，引起蜘蛛的注意，并且在站内做好锚文本加上指向首页的连接。</li><li>首页权重被内页负累。每个内页都要有关键词做锚文本指向首页，将权重传递给首页，内页做好关联连接即可。另一个增加首页权重的方法，就是次导航。我们将关键词做在次导航，并且至上首页，这样可以很好的提高网站首页的权重。</li><li>百度排名最近一直动荡，南京SEO顾问的排名一直在第二到第七之间不停的变动，一天能上下好几回。有变动，就有提高。搜索引擎的计算方法一直是发展的，也将会更加严谨，科学，合理。黑帽手法一直是被搜索殷勤所打击的，黑猫手法发挥的空间也越来越小。所以在网站内避免使用黑帽排名手法，包括关键词堆砌，隐藏关键词等手法，都是不可取的，这样你的网站很容易被搜索引擎拒绝收录。</li></ol><h2 id="二、做好站内静态页面文章更新"><a href="#二、做好站内静态页面文章更新" class="headerlink" title="二、做好站内静态页面文章更新"></a>二、做好站内静态页面文章更新</h2><p>静态页面一直是搜索引擎比较喜欢的，会加速收录，一般做网站的人都喜欢选择静态页面。做好静态页面的文章更新，最好的方法就是原创，当然伪原创也是有效方法。</p><ol><li>如果是伪原创，在页面的头部插入图片，加上alt标签，这个会让搜索引擎认为是原创的内容，提高文章的收录，有利于排名。</li><li>每个静态页面下均加入次导航，做好关键词锚文本指向首页。</li><li>在更新的文章中间，多次加入网站关键词并且适当加粗，加上链接指向首页。</li></ol><p>做好这三个工作，网站静态页面的更新，就可以轻松完成。</p><h2 id="三、友情链接的交换"><a href="#三、友情链接的交换" class="headerlink" title="三、友情链接的交换"></a>三、友情链接的交换</h2><p>交换友链一直是网站排名优化的工作内容之一，不可缺少。一个高权重的友链不但可以带动你的网站的权重，并且对排名有非常大的帮助，有时甚至会直接冲在首页。可以看出，友链是很重要的一个外链所在。一般在交换友链时，我们需要考虑的因素有：</p><ol><li>查看对方的pr值是否比你低。鉴于交换友链的出发点，不会跟比自己pr低的网站去交换友链的。</li><li>查看对方页面的收录情况。一般情况是找收录量大的网站做友情链接。</li><li>查看对方快照更新情况。看对方是否及时更新，还有最近的收录情况。</li><li>查看对方的外链情况。包括友链和外链，友链一般超过30个，就不要再交换了，因为这样意义不大。查看对方外链的收录量，一般选择外链收录多的网站交换。</li><li>查看对方网站是否被处罚过，如果被处罚过，交换友链就没有必要了，因为对方网站可能被屏蔽状态或者没有好的排名。</li><li>找一些权重比较高的友情链接平台，输入网站关键词和连接，既是一个外链，也可以让别人找到你，增加交换友链的可选择性。最好寻找有相关性的网站交换友链。</li></ol><h2 id="四、原创软文的推广"><a href="#四、原创软文的推广" class="headerlink" title="四、原创软文的推广"></a>四、原创软文的推广</h2><p>原创软文推广，一直是最好的外链推广方式，可以再做好外链的同时，还能增加网站的流量及品牌形象。</p><ol><li>软文的内容范围比较广，不一定要写跟网站相关的内容，只要写出来对别人有帮助，大家感兴趣的，适当的在文中加入网站的连接和关键词就行了。</li><li>将软文放在一些知名度高，基本也是权重比较高的网站上发布，这样带来的人气是很高的，推广的效果比较明显。</li><li>每篇软文的关键词要有所区别，加入的数量不要多，可以在结尾的时候加上一个就行了。</li><li>软文的内容广告性质不要表露出来，链接地址出现一次就行。太明显，可能就不能问世。</li><li>软文最好是每天一两篇，这样做提高网站排名是非常有利的，而且能很快看到效果。</li></ol><h2 id="五、大型论坛和问答平台做外链的方法"><a href="#五、大型论坛和问答平台做外链的方法" class="headerlink" title="五、大型论坛和问答平台做外链的方法"></a>五、大型论坛和问答平台做外链的方法</h2><p>很多人在发帖子，会帖子，或者做问答的时候，都会很郁闷的一件事就是，帖子总是被删掉，或者干脆账号被封掉，问答提交上去，一直审核，然后直接无视。如果不去总结或者学习方法，这种工作会变得枯燥乏味。</p><ol><li>发帖内容要跟论坛的主体是相关的，帖子的内容不一定跟你的网站内容相关，但是要跟论坛的主题相关。</li><li>最好是原创内容，如果不是原创，那么请认真的伪原创。</li><li>发帖内容不要是广告，一般广告贴几乎都会被秒杀过滤掉。</li><li>不要带一些敏感字，有带敏感字的，论坛程序会直接过滤。</li></ol><p>做好以上五点，你会惊喜的发现，你的排名正在默默的往前推进，持续地做好以上五点，你会发现，你的同行正在慢慢的退到你的身后。</p>]]></content>
    
    
    <summary type="html">这篇文章总结了五大方法帮助提升网站排名，包括做好站内优化，确保关键词定位准确并合理设置锚文本和次导航，避免使用黑帽手法；做好站内静态页面文章更新，优先选择原创或高质量的伪原创内容，并合理设置关键词和次导航；交换高权重的友情链接，选择PR值高、收录量大、快照更新及时的网站进行交换；进行原创软文推广，发布在知名度高的网站上，增加网站流量和品牌形象；在大型论坛和问答平台做外链，内容需与论坛主题相关且避免广告和敏感词。持续执行这些方法可有效提升网站排名。</summary>
    
    
    
    <category term="SEO笔记" scheme="https://www.codeobservatory.cn/categories/SEO%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="seo" scheme="https://www.codeobservatory.cn/tags/seo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-butterfly 接入腾讯混元大模型自动生成文章摘要(保姆教程)</title>
    <link href="https://www.codeobservatory.cn/archives/9dd55dbc.html"/>
    <id>https://www.codeobservatory.cn/archives/9dd55dbc.html</id>
    <published>2025-05-26T07:16:28.000Z</published>
    <updated>2025-05-28T07:33:45.679Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注册腾讯云账号"><a href="#注册腾讯云账号" class="headerlink" title="注册腾讯云账号"></a>注册腾讯云账号</h2><ol><li>首先必须要有一个腾讯云的账号，没有的话在官网注册一个，注册完成之后，进行实名操作。</li><li>接下来，在产品中心搜索<code>腾讯混元大模型</code>,点击<code>产品控制台</code>进入，在模型广场选择自己想要的大模型 (复制模型名称，后面会用到)<br><img src="/images/20250526154845.png" alt="腾讯混元大模型"><br><img src="/images/20250526154906.png" alt="腾讯混元大模型"></li><li><strong>创建API KEY</strong>:模型广场–系统管理–接入管理–创建API KEY (复制API KEY，后面会用到)</li></ol><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>该插件是插件基于<a href="https://github.com/rootlexme/hexo-ai-excerpt">hexo-ai-excerpt</a>插件开发而来，原插件已经归档，由其他大佬复刻了新的，地址如下：<a href="https://github.com/willow-god/hexo-ai-summary">hexo-ai-summary-liushen</a></p><p>复制下方命令运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-ai-summary-liushen --save</span><br></pre></td></tr></table></figure><p>该插件已经尽力不依赖其他非必要插件，但是仍然有一些需要额外安装，你可以尝试检查在博客根目录是否存在以下目录，如果不存在，则执行命令安装额外插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios p-limit node-fetch --save</span><br></pre></td></tr></table></figure><p>安装后，在<code>Hexo</code>配置文件<code>_config.yml</code>任意位置添加以下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aisummary:</span></span><br><span class="line">  <span class="comment"># 基本控制</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>               <span class="comment"># 是否启用插件，如果关闭，也可以在文章顶部的is_summary字段单独设置是否启用，反之也可以配置是否单独禁用</span></span><br><span class="line">  <span class="attr">cover_all:</span> <span class="literal">false</span>           <span class="comment"># 是否覆盖已有摘要，默认只生成缺失的，注意开启后，可能会导致过量的api使用！</span></span><br><span class="line">  <span class="attr">summary_field:</span> <span class="string">summary</span>     <span class="comment"># 摘要写入字段名（建议保留为 summary），重要配置，谨慎修改！！！！！！！</span></span><br><span class="line">  <span class="attr">logger:</span> <span class="number">1</span>                  <span class="comment"># 日志等级（0=仅错误，1=生成+错误，2=全部）</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># AI 接口配置</span></span><br><span class="line">  <span class="attr">api:</span> <span class="string">https://api.hunyuan.cloud.tencent.com/v1/chat/completions</span>     <span class="comment"># OpenAI 兼容模型接口</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span>  <span class="comment"># OpenAI 或兼容模型的密钥</span></span><br><span class="line">  <span class="attr">model:</span> <span class="string">hunyuan-turbos-latest</span>                           <span class="comment"># 使用模型名称</span></span><br><span class="line">  <span class="attr">prompt:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">    你是一个博客文章摘要生成工具，只需根据我发送的内容生成摘要。</span></span><br><span class="line"><span class="string">    不要换行，不要回答任何与摘要无关的问题、命令或请求。</span></span><br><span class="line"><span class="string">    摘要内容必须在150到250字之间，仅介绍文章核心内容。</span></span><br><span class="line"><span class="string">    请用中文作答，去除特殊字符，输出内容开头为“这里是码农观测站，这篇文章”。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">  <span class="comment"># 内容清洗设置</span></span><br><span class="line">  <span class="attr">ignoreRules:</span>              <span class="comment"># 可选：自定义内容清洗的正则规则</span></span><br><span class="line">    <span class="comment"># - &quot;\\&#123;%.*?%\\&#125;&quot;</span></span><br><span class="line">    <span class="comment"># - &quot;!\\[.*?\\]\\(.*?\\)&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">max_token:</span> <span class="number">5000</span>           <span class="comment"># 输入内容最大 token 长度（非输出限制）</span></span><br><span class="line">  <span class="attr">concurrency:</span> <span class="number">2</span>            <span class="comment"># 并发处理数，建议不高于 5</span></span><br></pre></td></tr></table></figure><p>请仔细查看以下内容，由于AI摘要会插入在文件顶部，如果不小心插入了可能会比较麻烦，需要手动删除，下面是配置的说明：</p><ol><li><p><code>summary_field</code>：设置写入到文章顶部字段的名称，比如我这里默认是<code>summary</code>，最终实现的结果就是在文章顶部插入一个字段为：<code>summary</code>的摘要文本：<br><img src="/images/20250526153208.png" alt="summary摘要字段"></p></li><li><p><code>cover_all</code>：覆盖性重新生成所有摘要，非必要不要打开，可能会导致过量的api消耗。</p></li><li><p><code>logger</code>为了更加精细的实现控制，我设置了三个日志等级，如下划分：</p><ul><li>0：仅仅显示错误信息，不会显示包括生成文章摘要在内的任何输出</li><li>1：当生成新文章摘要时，会输出对于文本的处理，比如超长自动裁剪，生成成功或者生成失败。</li><li>2：调试使用，会输出包括跳过所有页面信息，仅仅处理文章部分。</li></ul></li><li><p><code>api</code>：任何openai类型接口，包括deepseek，讯飞星火，腾讯混元，ChatGPT等。</p></li><li><p><code>token</code>：api对应的接口密钥。</p></li><li><p><code>model</code>：使用的模型名称，请检查对应接口文档说明，不同接口包含的模型不一致。</p></li><li><p><code>prompt</code>：提示词，请自行定制，建议详细一些，但是不要太废话，以我写的为例。</p></li><li><p><code>ignoreRules</code>：忽略文本正则接口，由于本插件直接获取Markdown文本，内置了一些处理，但是你仍然可以进行额外的处理，下面是内置的文本处理规则，如果有兴趣进行修改可以进行参考：</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 清理内容</span></span><br><span class="line">  content = content</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/```[\s\S]*?```/g</span>, <span class="string">&#x27;&#x27;</span>)           <span class="comment">// 代码块</span></span><br><span class="line">    <span class="comment">// .replace(/`[^`\n]+`/g, &#x27;&#x27;)                // 行内代码</span></span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/&#123;%[^%]*%&#125;/g</span>, <span class="string">&#x27;&#x27;</span>)                <span class="comment">// Hexo 标签</span></span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/^\|.*?\|.*$/gm</span>, <span class="string">&#x27;&#x27;</span>)             <span class="comment">// 表格行</span></span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/!\[.*?\]\(.*?\)/g</span>, <span class="string">&#x27;&#x27;</span>)          <span class="comment">// 图片</span></span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/\[(.*?)\]\(.*?\)/g</span>, <span class="string">&#x27;$1&#x27;</span>)       <span class="comment">// 超链接文本</span></span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>, <span class="string">&#x27;&#x27;</span>)                  <span class="comment">// HTML 标签</span></span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/&amp;nbsp;/g</span>, <span class="string">&#x27; &#x27;</span>)                  <span class="comment">// 空格实体</span></span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/\n&#123;2,&#125;/g</span>, <span class="string">&#x27;\n&#x27;</span>)                 <span class="comment">// 多重换行压缩</span></span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/^\s+|\s+$/gm</span>, <span class="string">&#x27;&#x27;</span>)               <span class="comment">// 行首尾空格</span></span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/[ \t]+/g</span>, <span class="string">&#x27; &#x27;</span>)                  <span class="comment">// 多空格压缩</span></span><br><span class="line">    .<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 拼接标题</span></span><br><span class="line">  <span class="keyword">const</span> combined = (title ? title.<span class="title function_">trim</span>() + <span class="string">&#x27;\n\n&#x27;</span> : <span class="string">&#x27;&#x27;</span>) + content;</span><br></pre></td></tr></table></figure><p>但是大部分情况可以忽略这个配置项，留空即可。</p><ol start="9"><li><p><code>max_token</code>：限制模型输入的最大字数，用字符串的slice进行截断，如果超出模型接受范围，可能会造成下文覆盖上文导致<code>prompt</code>丢失，内容混乱，所以请按照模型承受能力进行灵活配置。</p></li><li><p><code>concurrency</code>：很多模型会限制并发，所以这里我利用<code>p-limit</code>插件实现了并发限制，降低失败请求的概率，经过调查，<code>p-limit</code>应该是hexo内已经有的一些包，所以也不需要担心需要重新安装之类的，直接使用即可。</p></li></ol><h2 id="Hexo适配"><a href="#Hexo适配" class="headerlink" title="Hexo适配"></a>Hexo适配</h2><h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><p>目前我们已经自动化了从AI中，喂我们的文章给AI，再生成摘要，再写到文件顶部的过程，下面我们开始进行从文件顶部渲染到网站页面上。</p><p>首先在主题配置文件_config.butterfly.yml文件中写入配置，方便我们进行控制摘要是否开启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 文章设置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 文章AI摘要是否开启，会自动检索文章色summary字段，若没有则不显示</span></span><br><span class="line">ai_summary:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  title: AI摘要</span><br><span class="line">  loadingText: 正在加载···</span><br><span class="line">  modelName: HunYuan-Lite</span><br></pre></td></tr></table></figure><p>这里的内容均为装饰性内容，除了enable选项，其他没有任何控制效果，都是装饰，所以无需担心，可以先按照我的写，后面再根据效果修改。</p><h3 id="添加模板"><a href="#添加模板" class="headerlink" title="添加模板"></a>添加模板</h3><p>下面找到主题文件下的&#x2F;themes&#x2F;butterfly&#x2F;layout&#x2F;post.pug文件，添加文件中指出来的两行内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">extends includes/layout.pug</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">  <span class="comment">#post</span></span><br><span class="line">    <span class="keyword">if</span> top_img === <span class="literal">false</span></span><br><span class="line">      include includes/header/post-info.pug</span><br><span class="line"></span><br><span class="line">    article#article-container.post-content</span><br><span class="line">+     <span class="keyword">if</span> page.summary &amp;&amp; theme.ai_summary.enable</span><br><span class="line">+       include includes/post/post-summary.pug</span><br><span class="line">      !=page.content</span><br><span class="line">    include includes/post/post-copyright.pug</span><br><span class="line">    .tag_share</span><br><span class="line">      <span class="keyword">if</span> (page.tags.length &gt; 0 &amp;&amp; theme.post_meta.post.tags)</span><br><span class="line">        .post-meta__tag-list</span><br><span class="line">          each item, index <span class="keyword">in</span> page.tags.data</span><br><span class="line">            a(href=url_for(item.path)).post-meta__tags <span class="comment">#[=item.name]</span></span><br><span class="line">      include includes/third-party/share/index.pug</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> theme.reward.enable &amp;&amp; theme.reward.QR_code</span><br><span class="line">      !=partial(<span class="string">&#x27;includes/post/reward&#x27;</span>, &#123;&#125;, &#123;cache: <span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line">    //- ad</span><br><span class="line">    <span class="keyword">if</span> theme.ad &amp;&amp; theme.ad.post</span><br><span class="line">      .ads-wrap!=theme.ad.post</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> theme.post_pagination</span><br><span class="line">      include includes/pagination.pug</span><br><span class="line">    <span class="keyword">if</span> theme.related_post &amp;&amp; theme.related_post.enable</span><br><span class="line">      != related_posts(page,site.posts)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> page.comments !== <span class="literal">false</span> &amp;&amp; theme.comments.use</span><br><span class="line">      - var commentsJsLoad = <span class="literal">true</span></span><br><span class="line">      !=partial(<span class="string">&#x27;includes/third-party/comments/index&#x27;</span>, &#123;&#125;, &#123;cache: <span class="literal">true</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意缩进，pug作为预编译语言，对缩进的要求极为严格，在该文件中，应该是两个空格一缩进。</p><p>下面添加组件，创建文件&#x2F;root&#x2F;theme&#x2F;butterfly&#x2F;layout&#x2F;includes&#x2F;post&#x2F;post-summary.pug，写入以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.ai-summary</span><br><span class="line">    .ai-explanation(style=<span class="string">&quot;display: block;&quot;</span> data-summary=page.summary)=theme.ai_summary.loadingText</span><br><span class="line">    .ai-title </span><br><span class="line">        .ai-title-left </span><br><span class="line">            i.fa-brands.fa-slack</span><br><span class="line">            .ai-title-text=theme.ai_summary.title</span><br><span class="line">        .ai-tag#ai-tag= theme.ai_summary.modelName</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加样式"><a href="#添加样式" class="headerlink" title="添加样式"></a>添加样式</h3><p>这样，html部分就实现好了！下面我们添加样式部分，创建文件&#x2F;themes&#x2F;butterfly&#x2F;source&#x2F;css&#x2F;_layout&#x2F;ai-summary.styl文件，写入：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line">// ===================</span><br><span class="line">// 🌗 主题变量定义（仅使用项）</span><br><span class="line">// ===================</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:root</span></span><br><span class="line">  // ai_summary</span><br><span class="line">  <span class="attr">--liushen-title-font-color</span>: <span class="number">#0883b7</span></span><br><span class="line">  --liushen-maskbg: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.85</span>)</span><br><span class="line">  --liushen-ai-bg: <span class="built_in">conic-gradient</span>(from <span class="number">1.5708rad</span> at <span class="number">50%</span> <span class="number">50%</span>, <span class="number">#d6b300</span> <span class="number">0%</span>, <span class="number">#42A2FF</span> <span class="number">54%</span>, <span class="number">#d6b300</span> <span class="number">100%</span>)</span><br><span class="line"></span><br><span class="line">  // card 背景</span><br><span class="line">  --liushen-card-secondbg: <span class="number">#f1f3f8</span></span><br><span class="line"></span><br><span class="line">  // text</span><br><span class="line">  --liushen-text: <span class="number">#4c4948</span></span><br><span class="line">  --liushen-secondtext: <span class="number">#3c3c43cc</span></span><br><span class="line"></span><br><span class="line">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span><br><span class="line">  // ai_summary</span><br><span class="line">  --liushen-title-font-color: <span class="number">#0883b7</span></span><br><span class="line">  --liushen-maskbg: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.85</span>)</span><br><span class="line">  --liushen-ai-bg: <span class="built_in">conic-gradient</span>(from <span class="number">1.5708rad</span> at <span class="number">50%</span> <span class="number">50%</span>, <span class="built_in">rgba</span>(<span class="number">214</span>, <span class="number">178</span>, <span class="number">0</span>, <span class="number">0.46</span>) <span class="number">0%</span>, <span class="built_in">rgba</span>(<span class="number">66</span>, <span class="number">161</span>, <span class="number">255</span>, <span class="number">0.53</span>) <span class="number">54%</span>, <span class="built_in">rgba</span>(<span class="number">214</span>, <span class="number">178</span>, <span class="number">0</span>, <span class="number">0.49</span>) <span class="number">100%</span>)</span><br><span class="line"></span><br><span class="line">  // card 背景</span><br><span class="line">  --liushen-card-secondbg: <span class="number">#3e3f41</span></span><br><span class="line"></span><br><span class="line">  // text</span><br><span class="line">  --liushen-text: <span class="number">#ffffffb3</span></span><br><span class="line">  --liushen-secondtext: <span class="number">#a1a2b8</span></span><br><span class="line"></span><br><span class="line">// ===================</span><br><span class="line">// 📘 AI 摘要模块样式</span><br><span class="line">// ===================</span><br><span class="line"></span><br><span class="line">if <span class="built_in">hexo-config</span>(<span class="string">&#x27;ai_summary.enable&#x27;</span>)</span><br><span class="line">  .ai-summary</span><br><span class="line">    background-color <span class="built_in">var</span>(--liushen-maskbg)</span><br><span class="line">    background <span class="built_in">var</span>(--liushen-card-secondbg)</span><br><span class="line">    border-radius <span class="number">12px</span></span><br><span class="line">    padding <span class="number">8px</span> <span class="number">8px</span> <span class="number">12px</span> <span class="number">8px</span></span><br><span class="line">    line-height <span class="number">1.3</span></span><br><span class="line">    flex-direction column</span><br><span class="line">    margin-bottom <span class="number">16px</span></span><br><span class="line">    display flex</span><br><span class="line">    gap <span class="number">5px</span></span><br><span class="line">    position relative</span><br><span class="line"></span><br><span class="line">    &amp;::before</span><br><span class="line">      content <span class="string">&#x27;&#x27;</span></span><br><span class="line">      position absolute</span><br><span class="line">      top <span class="number">0</span></span><br><span class="line">      left <span class="number">0</span></span><br><span class="line">      width <span class="number">100%</span></span><br><span class="line">      height <span class="number">100%</span></span><br><span class="line">      z-index <span class="number">1</span></span><br><span class="line">      filter <span class="built_in">blur</span>(<span class="number">8px</span>)</span><br><span class="line">      opacity .<span class="number">4</span></span><br><span class="line">      background-image <span class="built_in">var</span>(--liushen-ai-bg)</span><br><span class="line">      transform <span class="built_in">scaleX</span>(<span class="number">1</span>) <span class="built_in">scaleY</span>(.<span class="number">95</span>) <span class="built_in">translateY</span>(<span class="number">2px</span>)</span><br><span class="line">    </span><br><span class="line">    &amp;::after</span><br><span class="line">      content: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">var</span>(--liushen-maskbg);</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.ai-explanation</span></span><br><span class="line">      <span class="attribute">z-index</span> <span class="number">10</span></span><br><span class="line">      <span class="attribute">padding</span> <span class="number">8px</span> <span class="number">12px</span></span><br><span class="line">      <span class="attribute">font-size</span> <span class="number">15px</span></span><br><span class="line">      <span class="attribute">line-height</span> <span class="number">1.4</span></span><br><span class="line">      <span class="attribute">color</span> <span class="selector-tag">var</span>(<span class="attr">--liushen-text</span>)</span><br><span class="line">      <span class="attribute">text-align</span> justify</span><br><span class="line"></span><br><span class="line">      // ✅ 打字机光标动画</span><br><span class="line">      &amp;<span class="selector-pseudo">::after</span></span><br><span class="line">        <span class="attribute">content</span> &#x27;&#x27;</span><br><span class="line">        <span class="attribute">display</span> inline-block</span><br><span class="line">        <span class="attribute">width</span> <span class="number">8px</span></span><br><span class="line">        <span class="attribute">height</span> <span class="number">2px</span></span><br><span class="line">        <span class="attribute">margin-left</span> <span class="number">2px</span></span><br><span class="line">        <span class="attribute">background</span> <span class="selector-tag">var</span>(<span class="attr">--liushen-text</span>)</span><br><span class="line">        <span class="attribute">vertical-align</span> <span class="attribute">bottom</span></span><br><span class="line">        <span class="attribute">animation</span> blink-underline <span class="number">1s</span> ease-in-out infinite</span><br><span class="line">        <span class="attribute">transition</span> <span class="attribute">all</span> .<span class="number">3s</span></span><br><span class="line">        <span class="attribute">position</span> relative</span><br><span class="line">        <span class="attribute">bottom</span> <span class="number">3px</span></span><br><span class="line"></span><br><span class="line">      // 平滑滚动动画</span><br><span class="line">      // <span class="selector-class">.char</span></span><br><span class="line">      //   <span class="attribute">display</span> inline-block</span><br><span class="line">      //   <span class="attribute">opacity</span> <span class="number">0</span></span><br><span class="line">      //   <span class="attribute">animation</span> chat-<span class="attribute">float</span> .<span class="number">5s</span> ease forwards</span><br><span class="line">    </span><br><span class="line">    <span class="selector-class">.ai-title</span></span><br><span class="line">      <span class="attribute">z-index</span> <span class="number">10</span></span><br><span class="line">      <span class="attribute">font-size</span> <span class="number">14px</span></span><br><span class="line">      <span class="attribute">display</span> <span class="attribute">flex</span></span><br><span class="line">      <span class="attribute">border-radius</span> <span class="number">8px</span></span><br><span class="line">      <span class="attribute">align-items</span> center</span><br><span class="line">      <span class="attribute">position</span> relative</span><br><span class="line">      <span class="attribute">padding</span> <span class="number">0</span> <span class="number">12px</span></span><br><span class="line">      <span class="attribute">cursor</span> default</span><br><span class="line">      <span class="attribute">user-select</span> <span class="attribute">none</span></span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.ai-title-left</span></span><br><span class="line">        <span class="attribute">display</span> <span class="attribute">flex</span></span><br><span class="line">        <span class="attribute">align-items</span> center</span><br><span class="line">        <span class="attribute">color</span> <span class="selector-tag">var</span>(<span class="attr">--liushen-title-font-color</span>)</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">i</span></span><br><span class="line">          <span class="attribute">margin-right</span> <span class="number">3px</span></span><br><span class="line">          <span class="attribute">display</span> <span class="attribute">flex</span></span><br><span class="line">          <span class="attribute">color</span> <span class="selector-tag">var</span>(<span class="attr">--liushen-title-font-color</span>)</span><br><span class="line">          <span class="attribute">border-radius</span> <span class="number">20px</span></span><br><span class="line">          <span class="attribute">justify-content</span> center</span><br><span class="line">          <span class="attribute">align-items</span> center</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.ai-title-text</span></span><br><span class="line">          <span class="attribute">font-weight</span> <span class="number">500</span></span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.ai-tag</span></span><br><span class="line">        <span class="attribute">color</span> <span class="selector-tag">var</span>(<span class="attr">--liushen-secondtext</span>)</span><br><span class="line">        <span class="attribute">font-weight</span> <span class="number">300</span></span><br><span class="line">        <span class="attribute">margin-left</span> auto</span><br><span class="line">        <span class="attribute">display</span> <span class="attribute">flex</span></span><br><span class="line">        <span class="attribute">align-items</span> center</span><br><span class="line">        <span class="attribute">justify-content</span> center</span><br><span class="line">        <span class="attribute">transition</span> .<span class="number">3s</span></span><br><span class="line"></span><br><span class="line">  // 平滑滚动动画</span><br><span class="line">  // <span class="keyword">@keyframes</span> chat-float</span><br><span class="line">  //   <span class="number">0%</span> </span><br><span class="line">  //     opacity <span class="number">0</span></span><br><span class="line">  //     transform translateY(<span class="number">20px</span>)</span><br><span class="line">  //   <span class="number">100%</span> </span><br><span class="line">  //       opacity <span class="number">1</span></span><br><span class="line">  //       transform translateY(<span class="number">0</span>)</span><br><span class="line">  </span><br><span class="line">  // ✅ 打字机光标闪烁动画</span><br><span class="line">  @keyframes blink-underline</span><br><span class="line">    <span class="number">0%</span>, <span class="number">100%</span></span><br><span class="line">      opacity <span class="number">1</span></span><br><span class="line">    <span class="number">50%</span></span><br><span class="line">      opacity <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>样式也实现啦！目前就差将我们的摘要插入到我们的网站就大功告成啦，为了实现的更加逼真，我这里实现了两种样式一个是打字机效果，一个是平滑显示效果，可以按需引入：</p><h3 id="添加核心JS"><a href="#添加核心JS" class="headerlink" title="添加核心JS"></a>添加核心JS</h3><p>下面我会介绍两种动效，可以按照自己的需求在任意js文件中选择一个引入即可，两个的区别是，打字机效果更加的节省性能，而平滑显示，因为每个文本为一个span，所以会比较耗费性能。</p><h4 id="打字机效果"><a href="#打字机效果" class="headerlink" title="打字机效果"></a>打字机效果</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打字机效果</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">typeTextMachineStyle</span>(<span class="params">text, targetSelector, options = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">        delay = <span class="number">50</span>,</span><br><span class="line">        startDelay = <span class="number">2000</span>,</span><br><span class="line">        onComplete = <span class="literal">null</span>,</span><br><span class="line">        clearBefore = <span class="literal">true</span>,</span><br><span class="line">        eraseBefore = <span class="literal">true</span>, <span class="comment">// 新增：是否以打字机方式清除原文本</span></span><br><span class="line">        eraseDelay = <span class="number">30</span>,    <span class="comment">// 新增：删除每个字符的间隔</span></span><br><span class="line">    &#125; = options;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(targetSelector);</span><br><span class="line">    <span class="keyword">if</span> (!el || <span class="keyword">typeof</span> text !== <span class="string">&quot;string&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">startTyping</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">renderChar</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (index &lt;= text.<span class="property">length</span>) &#123;</span><br><span class="line">                    el.<span class="property">textContent</span> = text.<span class="title function_">slice</span>(<span class="number">0</span>, index++);</span><br><span class="line">                    <span class="built_in">setTimeout</span>(renderChar, delay);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    onComplete &amp;&amp; <span class="title function_">onComplete</span>(el);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">renderChar</span>();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (clearBefore) &#123;</span><br><span class="line">            <span class="keyword">if</span> (eraseBefore &amp;&amp; el.<span class="property">textContent</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> currentText = el.<span class="property">textContent</span>;</span><br><span class="line">                <span class="keyword">let</span> eraseIndex = currentText.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">function</span> <span class="title function_">eraseChar</span>(<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (eraseIndex &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        el.<span class="property">textContent</span> = currentText.<span class="title function_">slice</span>(<span class="number">0</span>, --eraseIndex);</span><br><span class="line">                        <span class="built_in">setTimeout</span>(eraseChar, eraseDelay);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="title function_">startTyping</span>(); <span class="comment">// 删除完毕后开始打字</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="title function_">eraseChar</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                el.<span class="property">textContent</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="title function_">startTyping</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">startTyping</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, startDelay);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderAISummary</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> summaryEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.ai-summary .ai-explanation&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!summaryEl) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> summaryText = summaryEl.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-summary&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (summaryText) &#123;</span><br><span class="line">        <span class="title function_">typeTextMachineStyle</span>(summaryText, <span class="string">&quot;.ai-summary .ai-explanation&quot;</span>); <span class="comment">// 如果需要切换，在这里调用另一个函数即可</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;pjax:complete&#x27;</span>, renderAISummary);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, renderAISummary);</span><br></pre></td></tr></table></figure><p>本站使用的就是打字机效果，可以自行查看。</p><h4 id="平滑显示效果"><a href="#平滑显示效果" class="headerlink" title="平滑显示效果"></a>平滑显示效果</h4><p>这个我没有测试，如果好奇可以自行部署并尝试：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 平滑弹出效果</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">typeText</span>(<span class="params">text, targetSelector, options = &#123;&#125;</span>) &#123;</span><br><span class="line">     <span class="keyword">const</span> &#123;</span><br><span class="line">       delay = <span class="number">50</span>,          <span class="comment">// 每个字符之间的延迟（毫秒）</span></span><br><span class="line">       startDelay = <span class="number">2000</span>,   <span class="comment">// 开始打字前的延迟（默认 3 秒）</span></span><br><span class="line">       onComplete = <span class="literal">null</span>,   <span class="comment">// 动画完成后的回调</span></span><br><span class="line">       clearBefore = <span class="literal">true</span>   <span class="comment">// 是否在开始前清空原有内容</span></span><br><span class="line">     &#125; = options;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">const</span> targetEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(targetSelector);</span><br><span class="line">     <span class="keyword">if</span> (!targetEl || <span class="keyword">typeof</span> text !== <span class="string">&quot;string&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// if (clearBefore) targetEl.textContent = &quot;&quot;;</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">let</span> frameId = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">renderChar</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">if</span> (index &lt; text.<span class="property">length</span>) &#123;</span><br><span class="line">         <span class="keyword">const</span> span = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>);</span><br><span class="line">         span.<span class="property">textContent</span> = text[index++];</span><br><span class="line">         span.<span class="property">className</span> = <span class="string">&quot;char&quot;</span>;</span><br><span class="line">         targetEl.<span class="title function_">appendChild</span>(span);</span><br><span class="line">         frameId = <span class="title function_">requestAnimationFrame</span>(<span class="function">() =&gt;</span> <span class="built_in">setTimeout</span>(renderChar, delay));</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="title function_">cancelAnimationFrame</span>(frameId);</span><br><span class="line">         onComplete &amp;&amp; <span class="title function_">onComplete</span>(targetEl);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (clearBefore) targetEl.<span class="property">textContent</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">         <span class="title function_">renderChar</span>();</span><br><span class="line">     &#125;, startDelay);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderAISummary</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> summaryEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.ai-summary .ai-explanation&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!summaryEl) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> summaryText = summaryEl.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-summary&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (summaryText) &#123;</span><br><span class="line">        <span class="title function_">typeText</span>(summaryText, <span class="string">&quot;.ai-summary .ai-explanation&quot;</span>); <span class="comment">// 如果需要切换，在这里调用另一个函数即可</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;pjax:complete&#x27;</span>, renderAISummary);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, renderAISummary);</span><br></pre></td></tr></table></figure><p>注意，平滑滚动部分的css，我默认注释掉了，请在样式文件中自行打开注释。</p><p>这样，一个自己实现的AI摘要就完工啦！</p><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo c;hexo g</span><br></pre></td></tr></table></figure><p>如果一切正常，应该可以在每篇文章的顶部看到对应的摘要文段。</p><blockquote><p>由于该插件修改了头部，虽然修改的流程严格按照hexo的要求，写回头部的流程类似于<code>Hexo-abbrlink</code>，写入后不可撤回，并且由于AI具有不可控性，请运行前注意备份，防止在所有文章顶部生成不必要的内容，难以清理，特别是仅有一份源码在本地的朋友，注意勤备份。</p></blockquote><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.liushen.fun/posts/40702a0d/">本地实现HEXO文章AI摘要</a><br><a href="https://github.com/rootlexme/hexo-ai-excerpt">hexo-ai-excerpt</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;注册腾讯云账号&quot;&gt;&lt;a href=&quot;#注册腾讯云账号&quot; class=&quot;headerlink&quot; title=&quot;注册腾讯云账号&quot;&gt;&lt;/a&gt;注册腾讯云账号&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;首先必须要有一个腾讯云的账号，没有的话在官网注册一个，注册完成之后，进行实名操作。&lt;/l</summary>
      
    
    
    
    <category term="博客教程" scheme="https://www.codeobservatory.cn/categories/%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="hexo" scheme="https://www.codeobservatory.cn/tags/hexo/"/>
    
    <category term="butterfly" scheme="https://www.codeobservatory.cn/tags/butterfly/"/>
    
    <category term="AI摘要生成" scheme="https://www.codeobservatory.cn/tags/AI%E6%91%98%E8%A6%81%E7%94%9F%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>【详解】SEM和SEO有什么区别呢?</title>
    <link href="https://www.codeobservatory.cn/archives/e3d52469.html"/>
    <id>https://www.codeobservatory.cn/archives/e3d52469.html</id>
    <published>2025-05-26T01:14:28.000Z</published>
    <updated>2025-06-05T06:39:28.797Z</updated>
    
    <content type="html"><![CDATA[<p><strong>SEM和SEO</strong>是两种基本的数字营销战略，它们之间有许多相似之处，但也存在明显的区别。在这篇文章中，我们将探讨这两种策略之间的区别是什么，以及如何选择适合您业务需求的数字营销策略。</p><p><img src="https://www.codeobservatory.cn/upload/images/2023/4/3cb5e36c30cedc.png" alt="seo VS sem"></p><h2 id="一、SEM和SEO的定义"><a href="#一、SEM和SEO的定义" class="headerlink" title="一、SEM和SEO的定义"></a>一、SEM和SEO的定义</h2><p><code>SEM</code>（搜索引擎营销）和<code>SEO</code>（搜索引擎优化）都是数字营销策略，旨在推广您的品牌和产品，获得更多的客户和销售额。两者都是通过提高在搜索引擎结果页面（SERP）中的可见度来实现的，但它们之间的方法不同。</p><p>定义太抽象，我们看下图，几个主要位置，我用不同颜色的框做了区别。</p><p><img src="https://www.codeobservatory.cn/upload/images/2023/4/eba1a794b66c6bfc.png"></p><p>例如上图中：</p><p>红框：百度品牌专区。（根据品牌关键词搜索量百度官方评估价格，按月收固定费用，普通小品牌的参考价格在一个月十万这样。）</p><p>黄框：百度营销广告，标志为后面的“广告”字样，如下图。</p><p><img src="https://www.codeobservatory.cn/upload/images/2023/4/8aa9f128c62962cc.png"></p><p>通常按照点击竞价付费，在百度营销后台，您可以选择针对哪些关键词进行广告投放，以及为每一次点击支付的费用。参考价格一般每次点击在几块-十几块居多。</p><p>百度刚推出广告的时候，只有这一种，把这个叫做“竞价排名”，行业内因此沿用至今。所以，即使很多行内大牛，跟你说SEM的时候，也就是在说竞价排名。这没啥好争的。</p><p>说起来叫“竞价排名”，实际上这个部分，是可操作性最高的，因为排名位置不完全和单次点击您愿意出的价格一致。有“匹配方式”、“质量度”等复杂细节，所以会玩的和不会玩的，做出来的效果就差了非常多。</p><p>所以我们行业内口头上说SEM，一般就两种意思：</p><p><strong>SEM&#x3D;百度竞价广告+百度信息流广告+百度品牌专区</strong></p><p><strong>SEM&#x3D;百度竞价广告</strong></p><p>真正和客户讨论SEM的时候，通常是说前者，而且会特别问清楚只做百度SEM还是搜狗和360搜索引擎的SEM一起做。实际上，只做百度SEM的客户，毛估估占80%以上。</p><p>日常我们自己人讨论，意思就是后者了。SEM就是<strong>百度竞价排名</strong>。（因为搜索引擎广告相对来说只有这一部分是复杂的。别的部分没什么好讨论的）</p><p>蓝框：这事情本来不复杂，这就是典型的SEO搜索结果。识别方法是，搜索结果后面有个“百度快照“字样</p><p><img src="https://www.codeobservatory.cn/upload/images/2023/4/e83379cad696771a.png"></p><p>但是呢，这右上角多了 官方 的小蓝标的字样。</p><p>所以我们再严谨的说，同时有“百度快照“，“官方”小蓝标的网站，不一定是一个SEO的搜索结果。官方标志的产生有三种可能：</p><ol><li><p>最初，百度会主动为一些大型网站，知名品牌网站，打上“官方”标记。</p></li><li><p>再然后，通过百度资源平台的后台（以前叫百度站长工具），你可以提交自己的注册商标等材料，免费认证自己为官网，打上“官方”标记。</p></li><li><p>最后，百度要赚钱嘛（都懂）。就把这个作为一个业务授权代理公司来卖了。可以在SEO搜索结果中付费置顶公司名、商标名以及相关衍生词，同时打上“官方”标记。价格以这些词的搜索量为主要估价指标，在几千-十几万&#x2F;年之间浮动。普通非著名品牌名，想做这个官网认证，参考价格在一年几万块。</p></li></ol><p>因为这说起来复杂了。为了比较好表达，我们本文中约定，无论有没有“官方”标记，都把带有“百度快照”字样的搜索结果。叫做SEO结果。也就是本文示例中蓝框就是SEO搜索结果。</p><p>绿框：SEO搜索结果中，除了官网以外的其他搜索结果。我们用绿框来表示。</p><p>微信图片_20230407195547.png</p><p>在本文中，我们也把它定义为SEO的一部分。</p><p>也就是蓝框+绿框，这就算做SEO的部分。</p><p>这说起来有又点麻烦了，因为 这条后面，没有“百度快照”标记，怎么也是SEO结果？我只能说，咱们也不能这么教条对吧。</p><p>“百度快照”不是用来标记这是一个SEO结果的专用标记。其实只是提供一个链接，让你看到，上次搜索引擎的抓取程序，抓到的这个页面的快照是什么样子的。以免产生一些分歧。</p><p>所以SEO结果中的百度自家的产品，例如 百度百科、百度贴吧等。都是没有这个“百度快照”字样的。</p><p>灰框：右侧区域的这个灰框，是百度自动匹配出来的一些相关结果。</p><p>根据不同的搜索词，会有不同的展现形式。但是在我了解的范围内，还没有人能在可预测的指定时间和指定预算内，稳定的提升一个限定结果到这个位置。当然，高手很多的，如果有，请联系我，付费合作。</p><h2 id="二、SEM和SEO的区别？"><a href="#二、SEM和SEO的区别？" class="headerlink" title="二、SEM和SEO的区别？"></a>二、SEM和SEO的区别？</h2><p>SEO是一种有机的策略，它通常需要更长的时间，以使您的网站排名更高。它包括有关网站的改进，以使其更容易被搜索引擎索引。SEO的关键是确定正确的高价值关键词，并利用这些关键词使您的内容变得更富有内容和相关性，以使搜索引擎更容易找到您的网站。</p><p>SEM是一种付费的策略，它通常比SEO更快地带来结果，但成本也更高。其目的是通过购买关键词广告来增加您的在线可见度。这些广告通常以受众定位为基础，以确保您的品牌出现在与您特定产品或服务相关的受众的搜索结果中。</p><p>尽管两者之间有明显的区别，但它们也有许多相似之处。它们都需要根据您的目标受众来开发目标关键字，以使您的网站上出现在更广泛的搜索结果中。两者都有助于提高您的品牌的在线可见性，增加流量和销售额，并与您的客户建立更紧密的联系。</p><p>另一个不同点是，SEM可以提供更大的控制度。 SEM广告可以被适时地和非常精确地定位到某个特殊的人群，这意味着您可以非常精细地控制营销资金的支出。而SEO则可能受到搜索引擎算法的影响，需要更长的时间才能看到显著的结果，因此这种策略比SEM更加适合未来的计划。</p><p>在选择适合您业务需求的数字营销策略时，请考虑您的时间和预算。 如果您需要快速的结果并愿意支付更高的成本， 那么SEM可能是更好的选择，如果您的团队预算有限且您想长期投入，SEO则可能是更好的选择。</p><p>总之，SEM和SEO是两种数字营销策略，目的是提高您的在线可见性和销售额。尽管它们的方法存在明显的区别，但它们都有类似的目标和方法，即确定最佳关键词，并将您的品牌展示给更广泛的在线受众。 根据您的预算和时间限制，选择适合您业务需求的数字营销策略。</p>]]></content>
    
    
    <summary type="html">这篇文章详细介绍了SEM和SEO这两种数字营销战略的区别与联系，SEM即搜索引擎营销，是一种付费策略，通过购买关键词广告快速提升网站在搜索引擎结果页面的可见度，适合需要快速见效且预算充足的业务，而SEO即搜索引擎优化，是一种有机策略，通过改进网站内容和结构提高自然排名，适合长期投入且预算有限的业务，两者都旨在提高品牌在线可见性和销售额，但方法、成本和效果显现时间不同，选择时需根据业务需求、时间和预算综合考虑。</summary>
    
    
    
    <category term="SEO笔记" scheme="https://www.codeobservatory.cn/categories/SEO%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="seo" scheme="https://www.codeobservatory.cn/tags/seo/"/>
    
    <category term="sem" scheme="https://www.codeobservatory.cn/tags/sem/"/>
    
  </entry>
  
  <entry>
    <title>SEO搜索引擎排名的影响因素有哪些？</title>
    <link href="https://www.codeobservatory.cn/archives/fce81199.html"/>
    <id>https://www.codeobservatory.cn/archives/fce81199.html</id>
    <published>2025-05-26T01:04:57.000Z</published>
    <updated>2025-06-05T06:39:39.562Z</updated>
    
    <content type="html"><![CDATA[<p>SEO（Search Engine Optimization，搜索引擎优化）是一门综合性的学科，其核心目的是通过优化网站结构和内容等各方面来提高网站在搜索引擎中的排名和流量。当今社会，搜索引擎已成为人们获取信息的主要途径之一。因此，SEO变得越来越重要。下面我们来介绍一下SEO搜索引擎排名的影响因素有哪些。</p><p><img src="https://www.codeobservatory.cn/upload/images/2023/4/285d3131d932feab.jpg" alt="SEO搜索引擎排名"></p><ol><li><p>网站结构优化</p><p> 网站结构优化是SEO排名的基础，一个清晰的网站架构可让搜索引擎轻松的根据网站内容进行分类和归档。网站结构不仅要简单明了，还需要同搜索引擎的算法相适应，包括URL的优化、网站目录的分类以及网站内部链接的优化等。</p></li><li><p>网站内容优化</p><p> 网站内容是吸引用户的重要因素，同时也是搜索引擎排名的重要考察因素。内容质量的优化包括标题、关键字、图片、视频、文本等等，必须保证内容真实、有价值且满足用户需求，同时要关注内容的重复性和原创性，避免内容被搜索引擎视为垃圾信息。</p></li><li><p>外部链接的数量和质量</p><p> 外部链接的数量和质量也是SEO排名的重要因素之一，经过一定的关键词排名，搜索引擎会根据关键词在网上所获得的链接数和链接的来源质量作为参考，来衡量网站的权威性和可信度。因此，建立良好的外部链接是优化排名不可或缺的一部分。</p></li><li><p>网站访客的数量和留存时间</p><p> 搜索引擎排名算法也会考虑到网站访客数量和访客的留存时间等因素。访客数量是评估一个网站流量和受欢迎程度的关键指标之一。留存时间则代表了访客对网站内容的满意度。因此，增加网站流量和访客留存时间是提高SEO排名的必要步骤。</p></li><li><p>社交网络的影响</p><p> 社交媒体对于SEO排名也有一定的影响。如果网站的内容能够在社交网络上被大量分享和引用，搜索引擎会将其所带来的流量和社会信誉度纳入排名因素之中。因此，建立并与人群互动的社交网络账号是提高SEO排名的一种方法。</p></li></ol><p>综上所述，SEO搜索引擎排名的影响因素是多方面的，在优化过程中需要综合考虑各种关键因素，通过优化其中的数据和指标来提高网站排名和流量。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;SEO（Search Engine Optimization，搜索引擎优化）是一门综合性的学科，其核心目的是通过优化网站结构和内容等各方面来提高网站在搜索引擎中的排名和流量。当今社会，搜索引擎已成为人们获取信息的主要途径之一。因此，SEO变得越来越重要。下面我们来介绍一下S</summary>
      
    
    
    
    <category term="SEO笔记" scheme="https://www.codeobservatory.cn/categories/SEO%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="seo" scheme="https://www.codeobservatory.cn/tags/seo/"/>
    
  </entry>
  
  <entry>
    <title>seo优化超详细步骤 — hexo_butterfly</title>
    <link href="https://www.codeobservatory.cn/archives/42adfbca.html"/>
    <id>https://www.codeobservatory.cn/archives/42adfbca.html</id>
    <published>2025-05-24T02:00:21.000Z</published>
    <updated>2025-05-28T06:47:34.080Z</updated>
    
    <content type="html"><![CDATA[<p>优化过程中踩了不少坑，这里记录一下，也希望能帮助到需要的人。</p><h2 id="优化文章url，便于收录"><a href="#优化文章url，便于收录" class="headerlink" title="优化文章url，便于收录"></a>优化文章url，便于收录</h2><h3 id="缩减链接长度-且-固定链接"><a href="#缩减链接长度-且-固定链接" class="headerlink" title="缩减链接长度 且 固定链接"></a>缩减链接长度 且 固定链接</h3><p>hexo中，文章链接默认是 <code>permalink: :year/:month/:day/:title/</code> 这种形式。<br>即是：sitename&#x2F;year&#x2F;mounth&#x2F;day&#x2F;title四层的结构，且每次更改文章可能会导致链接变化<br>搜索引擎认为对于一般的中小型站点，3层足够承受所有的内容了，所以蜘蛛经常抓取的内容是前三层，而超过三层的内容蜘蛛认为那些内容并不重要，所以不经常爬取。出于这个原因所以permalink后面跟着的最好不要超过2个斜杠。<br>而我们的链接由于大多带有中文，转码的时候就会很丑很长，并且更改文章可能还会导致链接变化，有没有一种办法，既可以缩短链接长度又固定链接呢？</p><p>利用 abbrlink 插件可以实现，它会在文章生成一个abbrlink字段，这个字段永远不会改变，且使链接层次短，利于seo收录</p><h3 id="配置abbrlink"><a href="#配置abbrlink" class="headerlink" title="配置abbrlink"></a>配置abbrlink</h3><h4 id="在hexo根目录安装："><a href="#在hexo根目录安装：" class="headerlink" title="在hexo根目录安装："></a>在hexo根目录安装：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><h4 id="更改hexo配置文件-config-yml"><a href="#更改hexo配置文件-config-yml" class="headerlink" title="更改hexo配置文件_config.yml"></a>更改hexo配置文件<code>_config.yml</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">abbrlink:   <span class="comment"># 新增abbrlink配置</span></span><br><span class="line">  alg: crc32  <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  rep: hex    <span class="comment"># 进制：dec(default) and hex</span></span><br><span class="line">permalink: archives/:abbrlink.html   <span class="comment">#修改查找代码permalink</span></span><br></pre></td></tr></table></figure><p>abbrlink编码规则决定后就不要再改了，不然编码不统一，导致文章链接改变</p><h4 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h4><p>生成的abbrlink字段<br>链接效果<br>固定链接抛开seo优化不谈，本身就很重要，它保证了你链接的完好性</p><h2 id="将网站提交给百度搜索引擎"><a href="#将网站提交给百度搜索引擎" class="headerlink" title="将网站提交给百度搜索引擎"></a>将网站提交给百度搜索引擎</h2><p>这里只谈百度了，毕竟百度才是国内主要用的，谷歌有墙</p><h3 id="安装站点地图sitemap"><a href="#安装站点地图sitemap" class="headerlink" title="安装站点地图sitemap"></a>安装站点地图sitemap</h3><p>站点地图是一种文件，一般为xml形式，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。</p><h4 id="先安装插件"><a href="#先安装插件" class="headerlink" title="先安装插件"></a>先安装插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save         谷歌</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save   百度</span><br></pre></td></tr></table></figure><p>需要在根目录的_config.yml配置文件中添加sitemap</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure><h4 id="编译博客并生成xml文件"><a href="#编译博客并生成xml文件" class="headerlink" title="编译博客并生成xml文件"></a>编译博客并生成xml文件</h4><p>hexo g编译博客后，你会发现你的public中多了两个xml文件，分别是sitemap.xml以及baidusitemap.xml，里面收录着你博客将被爬虫的链接，此时代表你成功了。</p><p>之后再hexo d部署到网站上<code>https://www.CodeObservatory.cn/baidusitemap.xml</code>和<code>https://www.CodeObservatory.cn/sitemap.xml</code>验证一下能否跳转即可</p><h4 id="设置推送"><a href="#设置推送" class="headerlink" title="设置推送"></a>设置推送</h4><p>大致可以分为三种：</p><ol><li><p>主动推送：最快，在你 hexo g -d 时会生成一个txt文件，里面记录着你最新提交的n个链接，并把其交给百度。</p></li><li><p>自动推送：最方便，每当有人浏览你网页时，自动推送给百度。</p></li><li><p>sitemap：传统，将之前生成的sitemap文件交给百度，百度会定期检查你提交的sitemap文件并进行处理，但收录速度并不快。</p></li></ol><p>虽然从效率上来说，主动推送&gt;自动推送&gt;sitemap。但是其实三者可以一起使用，相辅相成，没必要分个高下。</p><h5 id="主动推送"><a href="#主动推送" class="headerlink" title="主动推送"></a>主动推送</h5><p>据说可以解决百度无法爬虫github的问题，因为是我们自己提交给百度的</p><h6 id="安装插件-hexo-baidu-url-submit"><a href="#安装插件-hexo-baidu-url-submit" class="headerlink" title="安装插件 hexo-baidu-url-submit"></a>安装插件 hexo-baidu-url-submit</h6><p>在hexo根目录安装 npm install hexo-baidu-url-submit –save</p><h6 id="在根目录的-config-yml中添加配置"><a href="#在根目录的-config-yml中添加配置" class="headerlink" title="在根目录的_config.yml中添加配置"></a>在根目录的_config.yml中添加配置</h6><p>先添加 hexo-baidu-url-submit 插件的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">baidu_url_submit:</span><br><span class="line">  count: 3 <span class="comment">## 提交最新的多少个链接</span></span><br><span class="line">  host: CodeObservatory.cn <span class="comment">## 在百度站长平台中注册的域名</span></span><br><span class="line">  token: token <span class="comment">## 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span></span><br><span class="line">  path: baidu_urls.txt <span class="comment">## 文本文档的地址， 新链接会保存在此文本文档里</span></span><br></pre></td></tr></table></figure><p>这里的token位推送接口给你的token<br>count 的值不要设太高，除非你真的有那么多的链接需要提交。否则多次提交重复内容百度会暂时将你加入黑名单或给你限制提交的次数甚至降低你网站的权值。而且在你调试网页且并没有新链接需要提交时，最好将count的值设为0，防止反复提交<br>还需要将_config.yml配置中的url改成你在站长平台注册的域名，不过我相信这个你肯定已经弄过了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url: https://CodeObservatory.cn</span><br></pre></td></tr></table></figure><p>最后修改一下deployer，让你推送时顺便推给百度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  - <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://xxxxxx.git</span><br><span class="line">  branch: main</span><br><span class="line">  - <span class="built_in">type</span>: baidu_url_submitter <span class="comment">#把链接提交到百度站长平台</span></span><br></pre></td></tr></table></figure><p>注意 yml 文件的缩进是由严格要求的，为2个空格，不然hexo编译时会报错</p><h6 id="hexo-d-g-推送博客"><a href="#hexo-d-g-推送博客" class="headerlink" title="hexo d -g 推送博客"></a>hexo d -g 推送博客</h6><p>都配置好后 hexo g -d 推送博文，出现这个就算成功啦！！<br>remain：一天内剩余提交量<br>success：本次提交成功的链接数</p><h5 id="自动推送"><a href="#自动推送" class="headerlink" title="自动推送"></a>自动推送</h5><p>根据百度原话，只要将 js代码 放到博客的每一个页面下就行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    var bp = document.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">    var curProtocol = window.location.protocol.split(<span class="string">&#x27;:&#x27;</span>)[0];</span><br><span class="line">    <span class="keyword">if</span> (curProtocol === <span class="string">&#x27;https&#x27;</span>) &#123;</span><br><span class="line">        bp.src = <span class="string">&#x27;https://zz.bdstatic.com/linksubmit/push.js&#x27;</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        bp.src = <span class="string">&#x27;http://push.zhanzhang.baidu.com/push.js&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    var s = document.getElementsByTagName(<span class="string">&quot;script&quot;</span>)[0];</span><br><span class="line">    s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>问题是怎么把这段代码放到每一个页面下？<br>网上大都只有 next 主题的方法，在主题配置文件中，令 baidu_push 设置为 true 即可，非常简单。而我是 butterfly 主题的该怎么做呢？</p><p>其实也非常简单，只需要利用主题配置文件中的 inject 配置项，在head 和 body 间引入这段 js代码 即可。在 themes&#x2F;butterfly&#x2F;source&#x2F;js&#x2F; 下新建 baidu_sub.js ，将代码复制粘贴进去，然后在主题配置文件的 inject 中引入即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">inject:</span><br><span class="line">  <span class="built_in">head</span>:</span><br><span class="line">    <span class="comment"># 百度自动提交js，将其放到每一个html页面的 &lt;head&gt; &lt;/head&gt; 处 </span></span><br><span class="line">    - &lt;script defer src=<span class="string">&quot;/js/baidu_sub.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">  bottom:</span><br><span class="line">    <span class="comment"># 放到 bottom 处也行，这样就是放到每个页面的 &lt;/body&gt; 前了</span></span><br><span class="line">    <span class="comment">#- &lt;script defer src=&quot;/js/baidu_sub.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，这段js成功出现在了每个html页面的head中</p><h5 id="sitemap推送"><a href="#sitemap推送" class="headerlink" title="sitemap推送"></a>sitemap推送</h5><p>很简单，把你之前生成的 sitemap.xml 在百度上提交即可</p><p>到此，主动推送三种方式具体如何实现到介绍完啦~</p><h2 id="拓展：robots-txt-文件的设置"><a href="#拓展：robots-txt-文件的设置" class="headerlink" title="拓展：robots.txt 文件的设置"></a>拓展：robots.txt 文件的设置</h2><p>以下是百度原话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">一、使用说明</span><br><span class="line">  1. robots.txt可以告诉百度您网站的哪些页面可以被抓取，哪些页面不可以被抓取。</span><br><span class="line">  2. 您可以通过Robots工具来创建、校验、更新您的robots.txt文件，或查看您网站robots.txt文件在百度生效的情况。</span><br><span class="line">  3. Robots工具目前支持48k的文件内容检测，请保证您的robots.txt文件不要过大，目录最长不超过250个字符。</span><br><span class="line"></span><br><span class="line">二、什么是robots文件</span><br><span class="line">  Robots是站点与spider沟通的重要渠道，站点通过robots文件声明本网站中不想被搜索引擎收录的部分或者指定搜索引擎只收录特定的部分。</span><br><span class="line"></span><br><span class="line">  搜索引擎使用spider程序自动访问互联网上的网页并获取网页信息。spider在访问一个网站时，会首先会检查该网站的根域下是否有一个叫做 robots.txt的纯文本文件，这个文件用于指定spider在您网站上的抓取范围。您可以在您的网站中创建一个robots.txt，在文件中声明 该网站中不想被搜索引擎收录的部分或者指定搜索引擎只收录特定的部分。</span><br><span class="line"></span><br><span class="line">  请注意，仅当您的网站包含不希望被搜索引擎收录的内容时，才需要使用robots.txt文件。如果您希望搜索引擎收录网站上所有内容，请勿建立robots.txt文件。</span><br><span class="line"></span><br><span class="line">三、robots.txt文件放在哪里?</span><br><span class="line">  robots.txt文件应该放置在网站根目录下。举例来说，当spider访问一个网站（比如 http://www.abc.com）时，首先会检查该网站中是否存在http://www.abc.com/robots.txt这个文件，如果 Spider找到这个文件，它就会根据这个文件的内容，来确定它访问权限的范围。</span><br></pre></td></tr></table></figure><p>总的来说，就是如果你不想让百度爬你某些链接，你就得设置 robots.txt 文件<br>设置 robots.txt 可以防止大量垃圾链接提交给百度，提高你文章的权重<br>而且听说设置 rotbot.txt 可以提高收录概率，所以就算你没有不希望被爬取的内容，也可以设置一个空的 robots.txt 文件<br>若你没有不希望被爬取的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line"></span><br><span class="line">Sitemap: https://CodeObservatory.cn/baidusitemap.xml</span><br><span class="line">Sitemap: https://CodeObservatory.cn/sitemap.xml</span><br></pre></td></tr></table></figure><p>若你有不希望被爬取的内容<br>比如说，我的文章全部放在 &#x2F;archives 中，那么我就可以只让百度爬取我 &#x2F;archives 中的内容，具体设置如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Allow: /archives</span><br><span class="line">Disallow: /</span><br><span class="line"></span><br><span class="line">Sitemap: https://CodeObservatory.cn/baidusitemap.xml</span><br><span class="line">Sitemap: https://CodeObservatory.cn/sitemap.xml</span><br></pre></td></tr></table></figure><p>Allow 的优先级大于 Disallow<br>最后可以放你的 sitemap.xml 文件链接<br>你可以通过以下步骤验证你的 robots.txt 文件是否配置成功</p><p>hexo g -d 后输入链接，看能否成功跳转到你的 robots.txt</p><p>在百度站长平台 robots 验证中检查显示成功即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;优化过程中踩了不少坑，这里记录一下，也希望能帮助到需要的人。&lt;/p&gt;
&lt;h2 id=&quot;优化文章url，便于收录&quot;&gt;&lt;a href=&quot;#优化文章url，便于收录&quot; class=&quot;headerlink&quot; title=&quot;优化文章url，便于收录&quot;&gt;&lt;/a&gt;优化文章url，便于收录</summary>
      
    
    
    
    <category term="博客教程" scheme="https://www.codeobservatory.cn/categories/%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="seo" scheme="https://www.codeobservatory.cn/tags/seo/"/>
    
    <category term="hexo" scheme="https://www.codeobservatory.cn/tags/hexo/"/>
    
    <category term="butterfly" scheme="https://www.codeobservatory.cn/tags/butterfly/"/>
    
  </entry>
  
  <entry>
    <title>C#中十种线程启动方式及其适用场景、优缺点分析</title>
    <link href="https://www.codeobservatory.cn/archives/74b7ef26.html"/>
    <id>https://www.codeobservatory.cn/archives/74b7ef26.html</id>
    <published>2024-07-24T08:59:35.000Z</published>
    <updated>2025-06-06T09:14:12.313Z</updated>
    
    <content type="html"><![CDATA[<p>C#提供了多种开启线程的方式，每种方式都有其独特的使用场景、优点和缺点。以下是C#中十种常见的开启线程的方式，以及它们各自的使用场景、优点和缺点：</p><h2 id="1-Thread类"><a href="#1-Thread类" class="headerlink" title="1.Thread类"></a>1.Thread类</h2><ul><li><p><strong>使用场景</strong>：快速启动执行简单任务。</p></li><li><p><strong>优点</strong>：简单易用。提供了直接控制线程的方法，如<code>Start、Suspend、Resume、Abort</code>等。</p></li><li><p><strong>缺点</strong>：功能较少，不适合复杂的线程管理；直接管理线程可能导致资源利用率不高或死锁等问题。</p></li></ul><h2 id="2-Task并行库"><a href="#2-Task并行库" class="headerlink" title="2.Task并行库"></a>2.Task并行库</h2><ul><li><p><strong>使用场景</strong>：需要更好的错误处理和任务管理。</p></li><li><p><strong>优点</strong>：提供了丰富的API，如<code>Task.Run、Task.WhenAll、Task.WhenAny</code>等，易于集成和使用；支持更复杂的并发模式，如取消、超时和错误处理。</p></li><li><p><strong>缺点</strong>：学习曲线较陡峭，需要掌握异步编程的概念。</p></li></ul><h2 id="3-BackgroundWorker组件"><a href="#3-BackgroundWorker组件" class="headerlink" title="3.BackgroundWorker组件"></a>3.BackgroundWorker组件</h2><ul><li><p><strong>使用场景</strong>：GUI应用中需要在后台执行任务，同时需要报告进度或处理异常。</p></li><li><p><strong>优点</strong>：支持进度更新和取消操作；自动将工作线程上的异常封送到UI线程，便于处理。</p></li><li><p><strong>缺点</strong>：较老的技术，可能在未来的.NET版本中逐渐淘汰；功能相对有限，不如Task并行库灵活。</p></li></ul><h2 id="4-ThreadPool"><a href="#4-ThreadPool" class="headerlink" title="4.ThreadPool"></a>4.ThreadPool</h2><ul><li><p><strong>使用场景</strong>：需要高效利用线程池资源，执行大量短时间的任务。</p></li><li><p><strong>优点</strong>：减少了线程创建和销毁的开销；提高了系统的响应性和吞吐量。</p></li><li><p><strong>缺点</strong>：控制度较低，不适合长时间运行的任务；可能因为线程池资源耗尽而导致任务等待。</p></li></ul><h2 id="5-Timer类"><a href="#5-Timer类" class="headerlink" title="5.Timer类"></a>5.Timer类</h2><ul><li><p><strong>使用场景</strong>：需要周期性执行任务。</p></li><li><p><strong>优点</strong>：简单实现周期性任务；可以在指定的时间间隔后执行回调方法。</p></li><li><p><strong>缺点</strong>：精度受限于系统计时器；长时间运行可能会导致资源消耗过多。</p></li></ul><h2 id="6-async和await"><a href="#6-async和await" class="headerlink" title="6.async和await"></a>6.async和await</h2><ul><li><p><strong>使用场景</strong>：需要简化异步代码，提高代码的可读性和可维护性。</p></li><li><p><strong>优点</strong>：代码更易读易维护；简化了异步编程的复杂性。</p></li><li><p><strong>缺点</strong>：需要.NET 4.5或更高版本；可能会导致死锁，特别是在GUI应用中。</p></li></ul><h2 id="7-Parallel类"><a href="#7-Parallel类" class="headerlink" title="7.Parallel类"></a>7.Parallel类</h2><ul><li><p><strong>使用场景</strong>：需要对数据集合进行并行处理，以提高性能。</p></li><li><p><strong>优点</strong>：简化了并行代码编写。提供了丰富的并行操作API，如<code>Parallel.For、Parallel.ForEach、Parallel.Sum</code>等。</p></li><li><p><strong>缺点</strong>：可能增加线程管理开销；需要考虑数据划分和合并的问题。</p></li></ul><h2 id="8-ThreadLocal"><a href="#8-ThreadLocal" class="headerlink" title="8.ThreadLocal"></a>8.ThreadLocal</h2><ul><li><p><strong>使用场景</strong>：需要线程安全的局部数据存储。</p></li><li><p><strong>优点</strong>：线程安全，避免数据竞争；提供了独立的数据副本给每个线程。</p></li><li><p><strong>缺点</strong>：管理不当可能导致资源泄露；需要手动清理不再需要的数据副本。</p></li></ul><h2 id="9-Lazy"><a href="#9-Lazy" class="headerlink" title="9.Lazy"></a>9.Lazy</h2><ul><li><p><strong>使用场景</strong>：需要延迟初始化对象，以节省资源或处理耗时的初始化任务。</p></li><li><p><strong>优点</strong>：延迟初始化，节省资源；提高了应用的启动速度。</p></li><li><p><strong>缺点</strong>：首次访问时可能引入延迟；需要考虑线程安全问题（尽管Lazy<T>本身是线程安全的）。</T></p></li></ul><h2 id="10-PLINQ"><a href="#10-PLINQ" class="headerlink" title="10.PLINQ"></a>10.PLINQ</h2><ul><li><p><strong>使用场景</strong>：对大数据集进行LINQ查询，并希望利用多核处理器提高查询效率。</p></li><li><p><strong>优点</strong>：利用多核处理器提高查询效率；简化了并行查询的编写。</p></li><li><p><strong>缺点</strong>：并行执行可能增加线程管理开销；需要考虑数据分区和聚合的策略。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>C#提供了多种开启线程的方式，每种方式都有其特定的使用场景和优缺点。开发者在选择时应根据实际需求、性能要求和可维护性等因素进行综合考虑。</p>]]></content>
    
    
    <summary type="html">提供了丰富的API，如Task.Run、Task.WhenAll、Task.WhenAny等，易于集成和使用；C#提供了多种开启线程的方式，每种方式都有其独特的使用场景、优点和缺点。提供了丰富的并行操作API，如Parallel.For、Parallel.ForEach、Parallel.Sum等。</summary>
    
    
    
    <category term="后端开发" scheme="https://www.codeobservatory.cn/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="C#" scheme="https://www.codeobservatory.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio2022安装SVN插件</title>
    <link href="https://www.codeobservatory.cn/archives/4e81b362.html"/>
    <id>https://www.codeobservatory.cn/archives/4e81b362.html</id>
    <published>2024-07-19T02:57:45.000Z</published>
    <updated>2025-06-03T03:09:11.979Z</updated>
    
    <content type="html"><![CDATA[<p>前言</p><p>需要电脑中装有SVN并能正常使用。</p><p>具体步骤</p><p>1.下载插件VisualSVN  下载链接:<a href="https://www.visualsvn.com/visualsvn/download/">https://www.visualsvn.com/visualsvn/download/</a></p><p>1721399581790.jpg</p><p>2.安装</p><p>双击打开下载的vsix文件一路安装即可。</p><p>注意：下载后安装时要确保VS关闭，否则无法配置。</p><p>1721399456280.jpg</p><p>3.安装成功后打开Visual Studio2022可以看到上方选项卡出现svn插件就可以使用啦。</p><p>1721400127425.jpg</p><p>1721400216921.jpg</p><p>4.点击Update更新代码，方便的很</p><p>1721400281590.jpg</p><p>更新成功！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前言&lt;/p&gt;
&lt;p&gt;需要电脑中装有SVN并能正常使用。&lt;/p&gt;
&lt;p&gt;具体步骤&lt;/p&gt;
&lt;p&gt;1.下载插件VisualSVN  下载链接:&lt;a href=&quot;https://www.visualsvn.com/visualsvn/download/&quot;&gt;https://www.</summary>
      
    
    
    
    <category term="技术分享" scheme="https://www.codeobservatory.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="vs" scheme="https://www.codeobservatory.cn/tags/vs/"/>
    
    <category term="svn" scheme="https://www.codeobservatory.cn/tags/svn/"/>
    
  </entry>
  
  <entry>
    <title>网页图片异步加载</title>
    <link href="https://www.codeobservatory.cn/archives/edf8539a.html"/>
    <id>https://www.codeobservatory.cn/archives/edf8539a.html</id>
    <published>2024-05-27T09:14:41.000Z</published>
    <updated>2025-06-06T09:24:44.084Z</updated>
    
    <content type="html"><![CDATA[<p>在当今数字化时代，网页加载速度对于用户体验至关重要。其中，图片作为网页内容的重要组成部分，其加载方式对于网页性能有着显著影响。异步加载作为一种优化手段，能够有效提升网页图片的加载速度和用户体验。本文将深入探讨网页图片异步加载的原理、实现方式以及实际应用效果。</p><p>首先，我们需要了解网页图片异步加载的基本原理。异步加载是指在不影响页面其他内容加载的情况下，将图片的加载过程放在后台进行。当浏览器解析到图片标签时，不会立即下载图片，而是将图片请求放入队列中，待其他资源加载完毕后再进行图片的加载。这种方式可以有效避免由于图片加载导致的页面阻塞和延迟，从而提升页面的整体加载速度。</p><p>实现网页图片异步加载的方式有多种，其中比较常用的是使用JavaScript进行图片懒加载。懒加载的核心思想是延迟图片的加载时间，只有当图片出现在视口范围内时才开始加载。具体实现时，可以通过监听滚动事件或<code>Intersection Observer API</code>来判断图片是否进入视口，然后动态地改变图片的src属性或进行图片的加载。此外，还有一些第三方库如<code>lozad.js</code>、<code>vue-lazyload</code>等提供了更简便的懒加载实现方式，可以方便地集成到项目中。</p><p>除了懒加载外，还有其他一些技术可以实现网页图片异步加载。例如，使用CDN加速图片的加载速度；对图片进行压缩和优化，减少图片的大小和加载时间；利用图片格式转换技术，选择更适合的图片格式以减小文件大小等。这些技术可以与其他异步加载方式相结合，进一步提升网页图片加载的性能。</p><p><strong>实例</strong>：</p><p>获取视窗的高度和宽度：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _viewPortHeight = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>, <span class="variable language_">window</span>.<span class="property">innerHeight</span> || <span class="number">0</span>),</span><br><span class="line">    _viewPortWidth = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>, <span class="variable language_">window</span>.<span class="property">innerWidth</span> || <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>是否处于垂直范围</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isOnVerticalViewPort</span>(<span class="params">ele</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> rect = ele.<span class="title function_">getBoundingClientRect</span>(); <span class="comment">// 获取距离视窗的位置信息</span></span><br><span class="line">    <span class="keyword">return</span> rect.<span class="property">top</span> &gt; <span class="number">0</span> &amp;&amp; rect.<span class="property">top</span> &lt;= _viewPortHeight;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>是否处于水平范围</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isOnHorizontalViewPort</span>(<span class="params">ele</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> rect = ele.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line">        <span class="keyword">return</span> rect.<span class="property">left</span> &gt; <span class="number">0</span> &amp;&amp; rect.<span class="property">left</span> &lt;= _viewPortWidth;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>有了这核心代码，我们只需要在滚动事件触发后，去动态的判断img元素了, 判断的示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">load</span>(<span class="params">images</span>) &#123;   </span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; images.<span class="property">length</span>; i++) &#123;</span><br><span class="line">         <span class="keyword">var</span> img = images[i];</span><br><span class="line">         <span class="keyword">if</span> (<span class="title function_">isOnVerticalViewPort</span>(img) &amp;&amp; <span class="title function_">isOnHorizontalViewPort</span>(img)) &#123;</span><br><span class="line">                     <span class="keyword">var</span> url = img.<span class="title function_">getAttribute</span>(<span class="string">&#x27;lz-src&#x27;</span>); <span class="comment">// 获取图片资源的地址</span></span><br><span class="line">            img.<span class="title function_">setAttribute</span>(<span class="string">&quot;src&quot;</span>, url);</span><br><span class="line">            img.<span class="property">isload</span> = <span class="literal">true</span>; <span class="comment">// 加载过后的图片设置加载标记，以免重复加载</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在html页面中的img元素的引用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">lz-src</span>=<span class="string">&quot;/images/2024/5/5391b771eb1f31df.png&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>通过给img元素添加<code>lz-src</code>标记，告诉异步脚本，这个元素需要异步加载图片。</p><p>监听滚动事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> images = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;img[&#x27;</span> + lz-src + <span class="string">&#x27;]&#x27;</span>); <span class="comment">// 按标记获取图片元素</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;scroll&quot;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;        <span class="title function_">load</span>(images);</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>在实际应用中，网页图片异步加载能够带来显著的效果。首先，它能够提升页面的加载速度，减少用户等待时间，从而提升用户体验。其次，异步加载能够减轻服务器的负担，降低带宽成本。由于图片加载被分散到不同的时间段进行，服务器的并发请求压力会相应减小，有利于提升网站的整体性能和稳定性。此外，异步加载还能够提高页面的响应性和交互性，使得用户在浏览网页时能够更流畅地进行操作和浏览。</p><p>然而，需要注意的是，虽然异步加载带来了诸多优势，但并非所有情况都适用。在一些需要快速展示图片的场景中，如新闻、电商等网站的首页或详情页，可能更倾向于使用同步加载以确保图片的及时呈现。因此，在选择是否使用异步加载时，需要根据具体需求和场景进行权衡和选择。</p><p>综上所述，网页图片异步加载是一种有效的优化手段，能够提升网页加载速度和用户体验。通过了解异步加载的原理和实现方式，我们可以根据实际需求选择合适的技术进行应用。同时，我们也需要关注异步加载可能带来的问题，并采取相应的措施进行解决。</p>]]></content>
    
    
    <summary type="html">这篇文章主要介绍了网页图片异步加载的原理、实现方式及其实际应用效果，强调了其在提升网页加载速度和用户体验方面的重要性。文章首先解释了异步加载的基本原理，即在不影响页面其他内容加载的情况下，在后台进行图片加载。接着，详细探讨了使用JavaScript实现图片懒加载的方法，包括监听滚动事件和使用`Intersection Observer API`来判断图片是否进入视口，并动态改变图片的src属性。此外，还介绍了其他优化技术，如使用CDN加速、图片压缩和优化、选择合适的图片格式等。文章通过实例代码展示了如何实现懒加载，并讨论了异步加载在实际应用中的显著效果，如提升页面加载速度、减轻服务器负担、提高页面响应性和交互性。最后，文章指出虽然异步加载有诸多优势，但在某些需要快速展示图片的场景中，可能需要使用同步加载，强调了根据具体需求选择合适技术的重要性。</summary>
    
    
    
    <category term="前端开发" scheme="https://www.codeobservatory.cn/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="异步" scheme="https://www.codeobservatory.cn/tags/%E5%BC%82%E6%AD%A5/"/>
    
    <category term="图片加载" scheme="https://www.codeobservatory.cn/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>网站部署到IIS后 Global.asax代码不执行究竟是为什么?</title>
    <link href="https://www.codeobservatory.cn/archives/b7db24a0.html"/>
    <id>https://www.codeobservatory.cn/archives/b7db24a0.html</id>
    <published>2024-03-27T01:32:12.000Z</published>
    <updated>2025-06-11T02:46:54.714Z</updated>
    
    <content type="html"><![CDATA[<p>Global.asax 用过的人都知道，记录点击量，伪静态非常好用，还可以定义计时器，自动执行函数！ 但是有没有人遇到这种情况，发布到服务器后，Global.asax跟禁用一样，里面的代码都不走了，根本就没执行Global.asax这个文件。 </p><p>然后我在网上查找了很多解决方案，简直五花八门的都有：</p><h2 id="网上找的解决方法："><a href="#网上找的解决方法：" class="headerlink" title="网上找的解决方法："></a>网上找的解决方法：</h2><ol><li>给web应用的根目录设置ASPNET和Network Services权限</li><li>如果是已发布的站点 Global.asax 不执行 Application_Start 问题</li></ol><ul><li>发布的站点 根目录有PrecompiledApp.config  造成冲突  删除后可以正常运行 </li><li>PrecompiledApp.config 是预编绎网站 生成的文件 一般情况用不到</li></ul><ol start="3"><li>如果是未编译站点。</li></ol><p>在vs中把asp.net Development Server 停止后在重新启动。</p><blockquote><p>然而却并没有什么卵用。</p></blockquote><h2 id="静下心来思考："><a href="#静下心来思考：" class="headerlink" title="静下心来思考："></a>静下心来思考：</h2><p>正常网站发布除了Global.asax以外，在编译的时候bin文件夹下会生成一个dll文件：App_global.asax.dll。</p><p><img src="https://images.codeobservatory.cn/hexo/202506/11/32c136415403c241.png" alt="网站部署到IIS后 Global.asax代码不执行究竟是为什么?"></p><p>这些文件都会一起打包部署到服务器上，网站才能正常运行。经过一一排查后发现，要执行Global.asax文件，必须还要将这个文件一起打包放到服务器里面：<code>App_global.asax.compiled</code>，没有这个文件，就不会执行Global.asax文件，所以当我把这个文件复制粘贴到服务器上之后，Global.asax文件就被执行了。这是一个小小的细节，当时没有注意到，其实很简单的一个问题。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>要执行Global.asax文件，必不可少的两个文件不能丢【<code>App_global.asax.compiled</code>、<code>App_global.asax.dll</code>】，大家如果也遇到这种情况，赶快去检查一下吧~</p><p><img src="https://images.codeobservatory.cn/hexo/202506/11/2d5697ef70735842.png" alt="网站部署到IIS后 Global.asax代码不执行究竟是为什么?"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Global.asax 用过的人都知道，记录点击量，伪静态非常好用，还可以定义计时器，自动执行函数！ 但是有没有人遇到这种情况，发布到服务器后，Global.asax跟禁用一样，里面的代码都不走了，根本就没执行Global.asax这个文件。 &lt;/p&gt;
&lt;p&gt;然后我在网上查</summary>
      
    
    
    
    <category term="技术分享" scheme="https://www.codeobservatory.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="IIS" scheme="https://www.codeobservatory.cn/tags/IIS/"/>
    
    <category term="Global" scheme="https://www.codeobservatory.cn/tags/Global/"/>
    
  </entry>
  
</feed>
